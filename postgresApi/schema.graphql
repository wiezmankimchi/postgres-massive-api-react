"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

type Booking implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  bookid: Int!
  facid: Int!
  memid: Int!
  starttime: Datetime!
  slots: Int!

  """Reads a single `Facility` that is related to this `Booking`."""
  facilityByFacid: Facility

  """Reads a single `Member` that is related to this `Booking`."""
  memberByMemid: Member
}

"""
A condition to be used against `Booking` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BookingCondition {
  """Checks for equality with the object’s `bookid` field."""
  bookid: Int

  """Checks for equality with the object’s `facid` field."""
  facid: Int

  """Checks for equality with the object’s `memid` field."""
  memid: Int

  """Checks for equality with the object’s `starttime` field."""
  starttime: Datetime
}

"""An input for mutations affecting `Booking`"""
input BookingInput {
  bookid: Int!
  facid: Int!
  memid: Int!
  starttime: Datetime!
  slots: Int!
}

"""
Represents an update to a `Booking`. Fields that are set will be updated.
"""
input BookingPatch {
  bookid: Int
  facid: Int
  memid: Int
  starttime: Datetime
  slots: Int
}

"""A connection to a list of `Booking` values."""
type BookingsConnection {
  """A list of `Booking` objects."""
  nodes: [Booking!]!

  """
  A list of edges which contains the `Booking` and cursor to aid in pagination.
  """
  edges: [BookingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Booking` you could get from the connection."""
  totalCount: Int!
}

"""A `Booking` edge in the connection."""
type BookingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Booking` at the end of the edge."""
  node: Booking!
}

"""Methods to use when ordering `Booking`."""
enum BookingsOrderBy {
  NATURAL
  BOOKID_ASC
  BOOKID_DESC
  FACID_ASC
  FACID_DESC
  MEMID_ASC
  MEMID_DESC
  STARTTIME_ASC
  STARTTIME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ChinookAlbum implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  albumId: Int!
  title: String!
  artistId: Int!

  """Reads a single `ChinookArtist` that is related to this `ChinookAlbum`."""
  chinookArtistByArtistId: ChinookArtist

  """Reads and enables pagination through a set of `ChinookTrack`."""
  chinookTracksByAlbumId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookTrack`."""
    orderBy: [ChinookTracksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookTrackCondition
  ): ChinookTracksConnection!
}

"""
A condition to be used against `ChinookAlbum` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChinookAlbumCondition {
  """Checks for equality with the object’s `albumId` field."""
  albumId: Int

  """Checks for equality with the object’s `artistId` field."""
  artistId: Int
}

"""An input for mutations affecting `ChinookAlbum`"""
input ChinookAlbumInput {
  albumId: Int!
  title: String!
  artistId: Int!
}

"""
Represents an update to a `ChinookAlbum`. Fields that are set will be updated.
"""
input ChinookAlbumPatch {
  albumId: Int
  title: String
  artistId: Int
}

"""A connection to a list of `ChinookAlbum` values."""
type ChinookAlbumsConnection {
  """A list of `ChinookAlbum` objects."""
  nodes: [ChinookAlbum!]!

  """
  A list of edges which contains the `ChinookAlbum` and cursor to aid in pagination.
  """
  edges: [ChinookAlbumsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChinookAlbum` you could get from the connection."""
  totalCount: Int!
}

"""A `ChinookAlbum` edge in the connection."""
type ChinookAlbumsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChinookAlbum` at the end of the edge."""
  node: ChinookAlbum!
}

"""Methods to use when ordering `ChinookAlbum`."""
enum ChinookAlbumsOrderBy {
  NATURAL
  ALBUM_ID_ASC
  ALBUM_ID_DESC
  ARTIST_ID_ASC
  ARTIST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ChinookArtist implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  artistId: Int!
  name: String

  """Reads and enables pagination through a set of `ChinookAlbum`."""
  chinookAlbumsByArtistId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookAlbum`."""
    orderBy: [ChinookAlbumsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookAlbumCondition
  ): ChinookAlbumsConnection!
}

"""
A condition to be used against `ChinookArtist` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChinookArtistCondition {
  """Checks for equality with the object’s `artistId` field."""
  artistId: Int
}

"""An input for mutations affecting `ChinookArtist`"""
input ChinookArtistInput {
  artistId: Int!
  name: String
}

"""
Represents an update to a `ChinookArtist`. Fields that are set will be updated.
"""
input ChinookArtistPatch {
  artistId: Int
  name: String
}

"""A connection to a list of `ChinookArtist` values."""
type ChinookArtistsConnection {
  """A list of `ChinookArtist` objects."""
  nodes: [ChinookArtist!]!

  """
  A list of edges which contains the `ChinookArtist` and cursor to aid in pagination.
  """
  edges: [ChinookArtistsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChinookArtist` you could get from the connection."""
  totalCount: Int!
}

"""A `ChinookArtist` edge in the connection."""
type ChinookArtistsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChinookArtist` at the end of the edge."""
  node: ChinookArtist!
}

"""Methods to use when ordering `ChinookArtist`."""
enum ChinookArtistsOrderBy {
  NATURAL
  ARTIST_ID_ASC
  ARTIST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ChinookCustomer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  customerId: Int!
  firstName: String!
  lastName: String!
  company: String
  address: String
  city: String
  state: String
  country: String
  postalCode: String
  phone: String
  fax: String
  email: String!
  supportRepId: Int

  """
  Reads a single `ChinookEmployee` that is related to this `ChinookCustomer`.
  """
  chinookEmployeeBySupportRepId: ChinookEmployee

  """Reads and enables pagination through a set of `ChinookInvoice`."""
  chinookInvoicesByCustomerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookInvoice`."""
    orderBy: [ChinookInvoicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookInvoiceCondition
  ): ChinookInvoicesConnection!
}

"""
A condition to be used against `ChinookCustomer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChinookCustomerCondition {
  """Checks for equality with the object’s `customerId` field."""
  customerId: Int

  """Checks for equality with the object’s `supportRepId` field."""
  supportRepId: Int
}

"""An input for mutations affecting `ChinookCustomer`"""
input ChinookCustomerInput {
  customerId: Int!
  firstName: String!
  lastName: String!
  company: String
  address: String
  city: String
  state: String
  country: String
  postalCode: String
  phone: String
  fax: String
  email: String!
  supportRepId: Int
}

"""
Represents an update to a `ChinookCustomer`. Fields that are set will be updated.
"""
input ChinookCustomerPatch {
  customerId: Int
  firstName: String
  lastName: String
  company: String
  address: String
  city: String
  state: String
  country: String
  postalCode: String
  phone: String
  fax: String
  email: String
  supportRepId: Int
}

"""A connection to a list of `ChinookCustomer` values."""
type ChinookCustomersConnection {
  """A list of `ChinookCustomer` objects."""
  nodes: [ChinookCustomer!]!

  """
  A list of edges which contains the `ChinookCustomer` and cursor to aid in pagination.
  """
  edges: [ChinookCustomersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ChinookCustomer` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ChinookCustomer` edge in the connection."""
type ChinookCustomersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChinookCustomer` at the end of the edge."""
  node: ChinookCustomer!
}

"""Methods to use when ordering `ChinookCustomer`."""
enum ChinookCustomersOrderBy {
  NATURAL
  CUSTOMER_ID_ASC
  CUSTOMER_ID_DESC
  SUPPORT_REP_ID_ASC
  SUPPORT_REP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ChinookEmployee implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  employeeId: Int!
  lastName: String!
  firstName: String!
  title: String
  reportsTo: Int
  birthDate: Datetime
  hireDate: Datetime
  address: String
  city: String
  state: String
  country: String
  postalCode: String
  phone: String
  fax: String
  email: String

  """
  Reads a single `ChinookEmployee` that is related to this `ChinookEmployee`.
  """
  chinookEmployeeByReportsTo: ChinookEmployee

  """Reads and enables pagination through a set of `ChinookCustomer`."""
  chinookCustomersBySupportRepId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookCustomer`."""
    orderBy: [ChinookCustomersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookCustomerCondition
  ): ChinookCustomersConnection!

  """Reads and enables pagination through a set of `ChinookEmployee`."""
  chinookEmployeesByReportsTo(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookEmployee`."""
    orderBy: [ChinookEmployeesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookEmployeeCondition
  ): ChinookEmployeesConnection!
}

"""
A condition to be used against `ChinookEmployee` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChinookEmployeeCondition {
  """Checks for equality with the object’s `employeeId` field."""
  employeeId: Int

  """Checks for equality with the object’s `reportsTo` field."""
  reportsTo: Int
}

"""An input for mutations affecting `ChinookEmployee`"""
input ChinookEmployeeInput {
  employeeId: Int!
  lastName: String!
  firstName: String!
  title: String
  reportsTo: Int
  birthDate: Datetime
  hireDate: Datetime
  address: String
  city: String
  state: String
  country: String
  postalCode: String
  phone: String
  fax: String
  email: String
}

"""
Represents an update to a `ChinookEmployee`. Fields that are set will be updated.
"""
input ChinookEmployeePatch {
  employeeId: Int
  lastName: String
  firstName: String
  title: String
  reportsTo: Int
  birthDate: Datetime
  hireDate: Datetime
  address: String
  city: String
  state: String
  country: String
  postalCode: String
  phone: String
  fax: String
  email: String
}

"""A connection to a list of `ChinookEmployee` values."""
type ChinookEmployeesConnection {
  """A list of `ChinookEmployee` objects."""
  nodes: [ChinookEmployee!]!

  """
  A list of edges which contains the `ChinookEmployee` and cursor to aid in pagination.
  """
  edges: [ChinookEmployeesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ChinookEmployee` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ChinookEmployee` edge in the connection."""
type ChinookEmployeesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChinookEmployee` at the end of the edge."""
  node: ChinookEmployee!
}

"""Methods to use when ordering `ChinookEmployee`."""
enum ChinookEmployeesOrderBy {
  NATURAL
  EMPLOYEE_ID_ASC
  EMPLOYEE_ID_DESC
  REPORTS_TO_ASC
  REPORTS_TO_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ChinookGenre implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  genreId: Int!
  name: String

  """Reads and enables pagination through a set of `ChinookTrack`."""
  chinookTracksByGenreId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookTrack`."""
    orderBy: [ChinookTracksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookTrackCondition
  ): ChinookTracksConnection!
}

"""
A condition to be used against `ChinookGenre` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChinookGenreCondition {
  """Checks for equality with the object’s `genreId` field."""
  genreId: Int
}

"""An input for mutations affecting `ChinookGenre`"""
input ChinookGenreInput {
  genreId: Int!
  name: String
}

"""
Represents an update to a `ChinookGenre`. Fields that are set will be updated.
"""
input ChinookGenrePatch {
  genreId: Int
  name: String
}

"""A connection to a list of `ChinookGenre` values."""
type ChinookGenresConnection {
  """A list of `ChinookGenre` objects."""
  nodes: [ChinookGenre!]!

  """
  A list of edges which contains the `ChinookGenre` and cursor to aid in pagination.
  """
  edges: [ChinookGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChinookGenre` you could get from the connection."""
  totalCount: Int!
}

"""A `ChinookGenre` edge in the connection."""
type ChinookGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChinookGenre` at the end of the edge."""
  node: ChinookGenre!
}

"""Methods to use when ordering `ChinookGenre`."""
enum ChinookGenresOrderBy {
  NATURAL
  GENRE_ID_ASC
  GENRE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ChinookInvoice implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  invoiceId: Int!
  customerId: Int!
  invoiceDate: Datetime!
  billingAddress: String
  billingCity: String
  billingState: String
  billingCountry: String
  billingPostalCode: String
  total: BigFloat!

  """
  Reads a single `ChinookCustomer` that is related to this `ChinookInvoice`.
  """
  chinookCustomerByCustomerId: ChinookCustomer

  """Reads and enables pagination through a set of `ChinookInvoiceline`."""
  chinookInvoicelinesByInvoiceId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookInvoiceline`."""
    orderBy: [ChinookInvoicelinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookInvoicelineCondition
  ): ChinookInvoicelinesConnection!
}

"""
A condition to be used against `ChinookInvoice` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChinookInvoiceCondition {
  """Checks for equality with the object’s `invoiceId` field."""
  invoiceId: Int

  """Checks for equality with the object’s `customerId` field."""
  customerId: Int
}

"""An input for mutations affecting `ChinookInvoice`"""
input ChinookInvoiceInput {
  invoiceId: Int!
  customerId: Int!
  invoiceDate: Datetime!
  billingAddress: String
  billingCity: String
  billingState: String
  billingCountry: String
  billingPostalCode: String
  total: BigFloat!
}

type ChinookInvoiceline implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  invoiceLineId: Int!
  invoiceId: Int!
  trackId: Int!
  unitPrice: BigFloat!
  quantity: Int!

  """
  Reads a single `ChinookInvoice` that is related to this `ChinookInvoiceline`.
  """
  chinookInvoiceByInvoiceId: ChinookInvoice

  """
  Reads a single `ChinookTrack` that is related to this `ChinookInvoiceline`.
  """
  chinookTrackByTrackId: ChinookTrack
}

"""
A condition to be used against `ChinookInvoiceline` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChinookInvoicelineCondition {
  """Checks for equality with the object’s `invoiceLineId` field."""
  invoiceLineId: Int

  """Checks for equality with the object’s `invoiceId` field."""
  invoiceId: Int

  """Checks for equality with the object’s `trackId` field."""
  trackId: Int
}

"""An input for mutations affecting `ChinookInvoiceline`"""
input ChinookInvoicelineInput {
  invoiceLineId: Int!
  invoiceId: Int!
  trackId: Int!
  unitPrice: BigFloat!
  quantity: Int!
}

"""
Represents an update to a `ChinookInvoiceline`. Fields that are set will be updated.
"""
input ChinookInvoicelinePatch {
  invoiceLineId: Int
  invoiceId: Int
  trackId: Int
  unitPrice: BigFloat
  quantity: Int
}

"""A connection to a list of `ChinookInvoiceline` values."""
type ChinookInvoicelinesConnection {
  """A list of `ChinookInvoiceline` objects."""
  nodes: [ChinookInvoiceline!]!

  """
  A list of edges which contains the `ChinookInvoiceline` and cursor to aid in pagination.
  """
  edges: [ChinookInvoicelinesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ChinookInvoiceline` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ChinookInvoiceline` edge in the connection."""
type ChinookInvoicelinesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChinookInvoiceline` at the end of the edge."""
  node: ChinookInvoiceline!
}

"""Methods to use when ordering `ChinookInvoiceline`."""
enum ChinookInvoicelinesOrderBy {
  NATURAL
  INVOICE_LINE_ID_ASC
  INVOICE_LINE_ID_DESC
  INVOICE_ID_ASC
  INVOICE_ID_DESC
  TRACK_ID_ASC
  TRACK_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `ChinookInvoice`. Fields that are set will be updated.
"""
input ChinookInvoicePatch {
  invoiceId: Int
  customerId: Int
  invoiceDate: Datetime
  billingAddress: String
  billingCity: String
  billingState: String
  billingCountry: String
  billingPostalCode: String
  total: BigFloat
}

"""A connection to a list of `ChinookInvoice` values."""
type ChinookInvoicesConnection {
  """A list of `ChinookInvoice` objects."""
  nodes: [ChinookInvoice!]!

  """
  A list of edges which contains the `ChinookInvoice` and cursor to aid in pagination.
  """
  edges: [ChinookInvoicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChinookInvoice` you could get from the connection."""
  totalCount: Int!
}

"""A `ChinookInvoice` edge in the connection."""
type ChinookInvoicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChinookInvoice` at the end of the edge."""
  node: ChinookInvoice!
}

"""Methods to use when ordering `ChinookInvoice`."""
enum ChinookInvoicesOrderBy {
  NATURAL
  INVOICE_ID_ASC
  INVOICE_ID_DESC
  CUSTOMER_ID_ASC
  CUSTOMER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ChinookMediatype implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  mediaTypeId: Int!
  name: String

  """Reads and enables pagination through a set of `ChinookTrack`."""
  chinookTracksByMediaTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookTrack`."""
    orderBy: [ChinookTracksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookTrackCondition
  ): ChinookTracksConnection!
}

"""
A condition to be used against `ChinookMediatype` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChinookMediatypeCondition {
  """Checks for equality with the object’s `mediaTypeId` field."""
  mediaTypeId: Int
}

"""An input for mutations affecting `ChinookMediatype`"""
input ChinookMediatypeInput {
  mediaTypeId: Int!
  name: String
}

"""
Represents an update to a `ChinookMediatype`. Fields that are set will be updated.
"""
input ChinookMediatypePatch {
  mediaTypeId: Int
  name: String
}

"""A connection to a list of `ChinookMediatype` values."""
type ChinookMediatypesConnection {
  """A list of `ChinookMediatype` objects."""
  nodes: [ChinookMediatype!]!

  """
  A list of edges which contains the `ChinookMediatype` and cursor to aid in pagination.
  """
  edges: [ChinookMediatypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ChinookMediatype` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ChinookMediatype` edge in the connection."""
type ChinookMediatypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChinookMediatype` at the end of the edge."""
  node: ChinookMediatype!
}

"""Methods to use when ordering `ChinookMediatype`."""
enum ChinookMediatypesOrderBy {
  NATURAL
  MEDIA_TYPE_ID_ASC
  MEDIA_TYPE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ChinookPlaylist implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  playlistId: Int!
  name: String

  """Reads and enables pagination through a set of `ChinookPlaylisttrack`."""
  chinookPlaylisttracksByPlaylistId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookPlaylisttrack`."""
    orderBy: [ChinookPlaylisttracksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookPlaylisttrackCondition
  ): ChinookPlaylisttracksConnection!
}

"""
A condition to be used against `ChinookPlaylist` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChinookPlaylistCondition {
  """Checks for equality with the object’s `playlistId` field."""
  playlistId: Int
}

"""An input for mutations affecting `ChinookPlaylist`"""
input ChinookPlaylistInput {
  playlistId: Int!
  name: String
}

"""
Represents an update to a `ChinookPlaylist`. Fields that are set will be updated.
"""
input ChinookPlaylistPatch {
  playlistId: Int
  name: String
}

"""A connection to a list of `ChinookPlaylist` values."""
type ChinookPlaylistsConnection {
  """A list of `ChinookPlaylist` objects."""
  nodes: [ChinookPlaylist!]!

  """
  A list of edges which contains the `ChinookPlaylist` and cursor to aid in pagination.
  """
  edges: [ChinookPlaylistsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ChinookPlaylist` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ChinookPlaylist` edge in the connection."""
type ChinookPlaylistsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChinookPlaylist` at the end of the edge."""
  node: ChinookPlaylist!
}

"""Methods to use when ordering `ChinookPlaylist`."""
enum ChinookPlaylistsOrderBy {
  NATURAL
  PLAYLIST_ID_ASC
  PLAYLIST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ChinookPlaylisttrack implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  playlistId: Int!
  trackId: Int!

  """
  Reads a single `ChinookPlaylist` that is related to this `ChinookPlaylisttrack`.
  """
  chinookPlaylistByPlaylistId: ChinookPlaylist

  """
  Reads a single `ChinookTrack` that is related to this `ChinookPlaylisttrack`.
  """
  chinookTrackByTrackId: ChinookTrack
}

"""
A condition to be used against `ChinookPlaylisttrack` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ChinookPlaylisttrackCondition {
  """Checks for equality with the object’s `playlistId` field."""
  playlistId: Int

  """Checks for equality with the object’s `trackId` field."""
  trackId: Int
}

"""An input for mutations affecting `ChinookPlaylisttrack`"""
input ChinookPlaylisttrackInput {
  playlistId: Int!
  trackId: Int!
}

"""
Represents an update to a `ChinookPlaylisttrack`. Fields that are set will be updated.
"""
input ChinookPlaylisttrackPatch {
  playlistId: Int
  trackId: Int
}

"""A connection to a list of `ChinookPlaylisttrack` values."""
type ChinookPlaylisttracksConnection {
  """A list of `ChinookPlaylisttrack` objects."""
  nodes: [ChinookPlaylisttrack!]!

  """
  A list of edges which contains the `ChinookPlaylisttrack` and cursor to aid in pagination.
  """
  edges: [ChinookPlaylisttracksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ChinookPlaylisttrack` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ChinookPlaylisttrack` edge in the connection."""
type ChinookPlaylisttracksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChinookPlaylisttrack` at the end of the edge."""
  node: ChinookPlaylisttrack!
}

"""Methods to use when ordering `ChinookPlaylisttrack`."""
enum ChinookPlaylisttracksOrderBy {
  NATURAL
  PLAYLIST_ID_ASC
  PLAYLIST_ID_DESC
  TRACK_ID_ASC
  TRACK_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ChinookTrack implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  trackId: Int!
  name: String!
  albumId: Int
  mediaTypeId: Int!
  genreId: Int
  composer: String
  milliseconds: Int!
  bytes: Int
  unitPrice: BigFloat!

  """Reads a single `ChinookAlbum` that is related to this `ChinookTrack`."""
  chinookAlbumByAlbumId: ChinookAlbum

  """
  Reads a single `ChinookMediatype` that is related to this `ChinookTrack`.
  """
  chinookMediatypeByMediaTypeId: ChinookMediatype

  """Reads a single `ChinookGenre` that is related to this `ChinookTrack`."""
  chinookGenreByGenreId: ChinookGenre

  """Reads and enables pagination through a set of `ChinookInvoiceline`."""
  chinookInvoicelinesByTrackId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookInvoiceline`."""
    orderBy: [ChinookInvoicelinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookInvoicelineCondition
  ): ChinookInvoicelinesConnection!

  """Reads and enables pagination through a set of `ChinookPlaylisttrack`."""
  chinookPlaylisttracksByTrackId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookPlaylisttrack`."""
    orderBy: [ChinookPlaylisttracksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookPlaylisttrackCondition
  ): ChinookPlaylisttracksConnection!
}

"""
A condition to be used against `ChinookTrack` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChinookTrackCondition {
  """Checks for equality with the object’s `trackId` field."""
  trackId: Int

  """Checks for equality with the object’s `albumId` field."""
  albumId: Int

  """Checks for equality with the object’s `mediaTypeId` field."""
  mediaTypeId: Int

  """Checks for equality with the object’s `genreId` field."""
  genreId: Int
}

"""An input for mutations affecting `ChinookTrack`"""
input ChinookTrackInput {
  trackId: Int!
  name: String!
  albumId: Int
  mediaTypeId: Int!
  genreId: Int
  composer: String
  milliseconds: Int!
  bytes: Int
  unitPrice: BigFloat!
}

"""
Represents an update to a `ChinookTrack`. Fields that are set will be updated.
"""
input ChinookTrackPatch {
  trackId: Int
  name: String
  albumId: Int
  mediaTypeId: Int
  genreId: Int
  composer: String
  milliseconds: Int
  bytes: Int
  unitPrice: BigFloat
}

"""A connection to a list of `ChinookTrack` values."""
type ChinookTracksConnection {
  """A list of `ChinookTrack` objects."""
  nodes: [ChinookTrack!]!

  """
  A list of edges which contains the `ChinookTrack` and cursor to aid in pagination.
  """
  edges: [ChinookTracksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChinookTrack` you could get from the connection."""
  totalCount: Int!
}

"""A `ChinookTrack` edge in the connection."""
type ChinookTracksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChinookTrack` at the end of the edge."""
  node: ChinookTrack!
}

"""Methods to use when ordering `ChinookTrack`."""
enum ChinookTracksOrderBy {
  NATURAL
  TRACK_ID_ASC
  TRACK_ID_DESC
  ALBUM_ID_ASC
  ALBUM_ID_DESC
  MEDIA_TYPE_ID_ASC
  MEDIA_TYPE_ID_DESC
  GENRE_ID_ASC
  GENRE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Booking` mutation."""
input CreateBookingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Booking` to be created by this mutation."""
  booking: BookingInput!
}

"""The output of our create `Booking` mutation."""
type CreateBookingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Booking` that was created by this mutation."""
  booking: Booking

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Facility` that is related to this `Booking`."""
  facilityByFacid: Facility

  """Reads a single `Member` that is related to this `Booking`."""
  memberByMemid: Member

  """An edge for our `Booking`. May be used by Relay 1."""
  bookingEdge(
    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingsEdge
}

"""All input for the create `ChinookAlbum` mutation."""
input CreateChinookAlbumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChinookAlbum` to be created by this mutation."""
  chinookAlbum: ChinookAlbumInput!
}

"""The output of our create `ChinookAlbum` mutation."""
type CreateChinookAlbumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookAlbum` that was created by this mutation."""
  chinookAlbum: ChinookAlbum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChinookArtist` that is related to this `ChinookAlbum`."""
  chinookArtistByArtistId: ChinookArtist

  """An edge for our `ChinookAlbum`. May be used by Relay 1."""
  chinookAlbumEdge(
    """The method to use when ordering `ChinookAlbum`."""
    orderBy: [ChinookAlbumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookAlbumsEdge
}

"""All input for the create `ChinookArtist` mutation."""
input CreateChinookArtistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChinookArtist` to be created by this mutation."""
  chinookArtist: ChinookArtistInput!
}

"""The output of our create `ChinookArtist` mutation."""
type CreateChinookArtistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookArtist` that was created by this mutation."""
  chinookArtist: ChinookArtist

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChinookArtist`. May be used by Relay 1."""
  chinookArtistEdge(
    """The method to use when ordering `ChinookArtist`."""
    orderBy: [ChinookArtistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookArtistsEdge
}

"""All input for the create `ChinookCustomer` mutation."""
input CreateChinookCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChinookCustomer` to be created by this mutation."""
  chinookCustomer: ChinookCustomerInput!
}

"""The output of our create `ChinookCustomer` mutation."""
type CreateChinookCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookCustomer` that was created by this mutation."""
  chinookCustomer: ChinookCustomer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookEmployee` that is related to this `ChinookCustomer`.
  """
  chinookEmployeeBySupportRepId: ChinookEmployee

  """An edge for our `ChinookCustomer`. May be used by Relay 1."""
  chinookCustomerEdge(
    """The method to use when ordering `ChinookCustomer`."""
    orderBy: [ChinookCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookCustomersEdge
}

"""All input for the create `ChinookEmployee` mutation."""
input CreateChinookEmployeeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChinookEmployee` to be created by this mutation."""
  chinookEmployee: ChinookEmployeeInput!
}

"""The output of our create `ChinookEmployee` mutation."""
type CreateChinookEmployeePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookEmployee` that was created by this mutation."""
  chinookEmployee: ChinookEmployee

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookEmployee` that is related to this `ChinookEmployee`.
  """
  chinookEmployeeByReportsTo: ChinookEmployee

  """An edge for our `ChinookEmployee`. May be used by Relay 1."""
  chinookEmployeeEdge(
    """The method to use when ordering `ChinookEmployee`."""
    orderBy: [ChinookEmployeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookEmployeesEdge
}

"""All input for the create `ChinookGenre` mutation."""
input CreateChinookGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChinookGenre` to be created by this mutation."""
  chinookGenre: ChinookGenreInput!
}

"""The output of our create `ChinookGenre` mutation."""
type CreateChinookGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookGenre` that was created by this mutation."""
  chinookGenre: ChinookGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChinookGenre`. May be used by Relay 1."""
  chinookGenreEdge(
    """The method to use when ordering `ChinookGenre`."""
    orderBy: [ChinookGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookGenresEdge
}

"""All input for the create `ChinookInvoice` mutation."""
input CreateChinookInvoiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChinookInvoice` to be created by this mutation."""
  chinookInvoice: ChinookInvoiceInput!
}

"""All input for the create `ChinookInvoiceline` mutation."""
input CreateChinookInvoicelineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChinookInvoiceline` to be created by this mutation."""
  chinookInvoiceline: ChinookInvoicelineInput!
}

"""The output of our create `ChinookInvoiceline` mutation."""
type CreateChinookInvoicelinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookInvoiceline` that was created by this mutation."""
  chinookInvoiceline: ChinookInvoiceline

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookInvoice` that is related to this `ChinookInvoiceline`.
  """
  chinookInvoiceByInvoiceId: ChinookInvoice

  """
  Reads a single `ChinookTrack` that is related to this `ChinookInvoiceline`.
  """
  chinookTrackByTrackId: ChinookTrack

  """An edge for our `ChinookInvoiceline`. May be used by Relay 1."""
  chinookInvoicelineEdge(
    """The method to use when ordering `ChinookInvoiceline`."""
    orderBy: [ChinookInvoicelinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookInvoicelinesEdge
}

"""The output of our create `ChinookInvoice` mutation."""
type CreateChinookInvoicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookInvoice` that was created by this mutation."""
  chinookInvoice: ChinookInvoice

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookCustomer` that is related to this `ChinookInvoice`.
  """
  chinookCustomerByCustomerId: ChinookCustomer

  """An edge for our `ChinookInvoice`. May be used by Relay 1."""
  chinookInvoiceEdge(
    """The method to use when ordering `ChinookInvoice`."""
    orderBy: [ChinookInvoicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookInvoicesEdge
}

"""All input for the create `ChinookMediatype` mutation."""
input CreateChinookMediatypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChinookMediatype` to be created by this mutation."""
  chinookMediatype: ChinookMediatypeInput!
}

"""The output of our create `ChinookMediatype` mutation."""
type CreateChinookMediatypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookMediatype` that was created by this mutation."""
  chinookMediatype: ChinookMediatype

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChinookMediatype`. May be used by Relay 1."""
  chinookMediatypeEdge(
    """The method to use when ordering `ChinookMediatype`."""
    orderBy: [ChinookMediatypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookMediatypesEdge
}

"""All input for the create `ChinookPlaylist` mutation."""
input CreateChinookPlaylistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChinookPlaylist` to be created by this mutation."""
  chinookPlaylist: ChinookPlaylistInput!
}

"""The output of our create `ChinookPlaylist` mutation."""
type CreateChinookPlaylistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookPlaylist` that was created by this mutation."""
  chinookPlaylist: ChinookPlaylist

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChinookPlaylist`. May be used by Relay 1."""
  chinookPlaylistEdge(
    """The method to use when ordering `ChinookPlaylist`."""
    orderBy: [ChinookPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookPlaylistsEdge
}

"""All input for the create `ChinookPlaylisttrack` mutation."""
input CreateChinookPlaylisttrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChinookPlaylisttrack` to be created by this mutation."""
  chinookPlaylisttrack: ChinookPlaylisttrackInput!
}

"""The output of our create `ChinookPlaylisttrack` mutation."""
type CreateChinookPlaylisttrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookPlaylisttrack` that was created by this mutation."""
  chinookPlaylisttrack: ChinookPlaylisttrack

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookPlaylist` that is related to this `ChinookPlaylisttrack`.
  """
  chinookPlaylistByPlaylistId: ChinookPlaylist

  """
  Reads a single `ChinookTrack` that is related to this `ChinookPlaylisttrack`.
  """
  chinookTrackByTrackId: ChinookTrack

  """An edge for our `ChinookPlaylisttrack`. May be used by Relay 1."""
  chinookPlaylisttrackEdge(
    """The method to use when ordering `ChinookPlaylisttrack`."""
    orderBy: [ChinookPlaylisttracksOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookPlaylisttracksEdge
}

"""All input for the create `ChinookTrack` mutation."""
input CreateChinookTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChinookTrack` to be created by this mutation."""
  chinookTrack: ChinookTrackInput!
}

"""The output of our create `ChinookTrack` mutation."""
type CreateChinookTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookTrack` that was created by this mutation."""
  chinookTrack: ChinookTrack

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChinookAlbum` that is related to this `ChinookTrack`."""
  chinookAlbumByAlbumId: ChinookAlbum

  """
  Reads a single `ChinookMediatype` that is related to this `ChinookTrack`.
  """
  chinookMediatypeByMediaTypeId: ChinookMediatype

  """Reads a single `ChinookGenre` that is related to this `ChinookTrack`."""
  chinookGenreByGenreId: ChinookGenre

  """An edge for our `ChinookTrack`. May be used by Relay 1."""
  chinookTrackEdge(
    """The method to use when ordering `ChinookTrack`."""
    orderBy: [ChinookTracksOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookTracksEdge
}

"""All input for the create `Employee` mutation."""
input CreateEmployeeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Employee` to be created by this mutation."""
  employee: EmployeeInput!
}

"""The output of our create `Employee` mutation."""
type CreateEmployeePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Employee` that was created by this mutation."""
  employee: Employee

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Employee`. May be used by Relay 1."""
  employeeEdge(
    """The method to use when ordering `Employee`."""
    orderBy: [EmployeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmployeesEdge
}

"""All input for the create `Facility` mutation."""
input CreateFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Facility` to be created by this mutation."""
  facility: FacilityInput!
}

"""The output of our create `Facility` mutation."""
type CreateFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was created by this mutation."""
  facility: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge
}

"""All input for the create `Member` mutation."""
input CreateMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Member` to be created by this mutation."""
  member: MemberInput!
}

"""The output of our create `Member` mutation."""
type CreateMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was created by this mutation."""
  member: Member

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Member` that is related to this `Member`."""
  memberByRecommendedby: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge
}

"""All input for the create `NorthwindCategory` mutation."""
input CreateNorthwindCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NorthwindCategory` to be created by this mutation."""
  northwindCategory: NorthwindCategoryInput!
}

"""The output of our create `NorthwindCategory` mutation."""
type CreateNorthwindCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindCategory` that was created by this mutation."""
  northwindCategory: NorthwindCategory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindCategory`. May be used by Relay 1."""
  northwindCategoryEdge(
    """The method to use when ordering `NorthwindCategory`."""
    orderBy: [NorthwindCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindCategoriesEdge
}

"""All input for the create `NorthwindCustomerCustomerDemo` mutation."""
input CreateNorthwindCustomerCustomerDemoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NorthwindCustomerCustomerDemo` to be created by this mutation."""
  northwindCustomerCustomerDemo: NorthwindCustomerCustomerDemoInput!
}

"""The output of our create `NorthwindCustomerCustomerDemo` mutation."""
type CreateNorthwindCustomerCustomerDemoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindCustomerCustomerDemo` that was created by this mutation."""
  northwindCustomerCustomerDemo: NorthwindCustomerCustomerDemo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `NorthwindCustomer` that is related to this `NorthwindCustomerCustomerDemo`.
  """
  northwindCustomerByCustomerId: NorthwindCustomer

  """
  An edge for our `NorthwindCustomerCustomerDemo`. May be used by Relay 1.
  """
  northwindCustomerCustomerDemoEdge(
    """The method to use when ordering `NorthwindCustomerCustomerDemo`."""
    orderBy: [NorthwindCustomerCustomerDemosOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindCustomerCustomerDemosEdge
}

"""All input for the create `NorthwindCustomerDemographic` mutation."""
input CreateNorthwindCustomerDemographicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NorthwindCustomerDemographic` to be created by this mutation."""
  northwindCustomerDemographic: NorthwindCustomerDemographicInput!
}

"""The output of our create `NorthwindCustomerDemographic` mutation."""
type CreateNorthwindCustomerDemographicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindCustomerDemographic` that was created by this mutation."""
  northwindCustomerDemographic: NorthwindCustomerDemographic

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `NorthwindCustomerDemographic`. May be used by Relay 1.
  """
  northwindCustomerDemographicEdge(
    """The method to use when ordering `NorthwindCustomerDemographic`."""
    orderBy: [NorthwindCustomerDemographicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindCustomerDemographicsEdge
}

"""All input for the create `NorthwindCustomer` mutation."""
input CreateNorthwindCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NorthwindCustomer` to be created by this mutation."""
  northwindCustomer: NorthwindCustomerInput!
}

"""The output of our create `NorthwindCustomer` mutation."""
type CreateNorthwindCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindCustomer` that was created by this mutation."""
  northwindCustomer: NorthwindCustomer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindCustomer`. May be used by Relay 1."""
  northwindCustomerEdge(
    """The method to use when ordering `NorthwindCustomer`."""
    orderBy: [NorthwindCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindCustomersEdge
}

"""All input for the create `NorthwindEmployeeTerritory` mutation."""
input CreateNorthwindEmployeeTerritoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NorthwindEmployeeTerritory` to be created by this mutation."""
  northwindEmployeeTerritory: NorthwindEmployeeTerritoryInput!
}

"""The output of our create `NorthwindEmployeeTerritory` mutation."""
type CreateNorthwindEmployeeTerritoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindEmployeeTerritory` that was created by this mutation."""
  northwindEmployeeTerritory: NorthwindEmployeeTerritory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Employee` that is related to this `NorthwindEmployeeTerritory`.
  """
  employeeByEmployeeId: Employee

  """An edge for our `NorthwindEmployeeTerritory`. May be used by Relay 1."""
  northwindEmployeeTerritoryEdge(
    """The method to use when ordering `NorthwindEmployeeTerritory`."""
    orderBy: [NorthwindEmployeeTerritoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindEmployeeTerritoriesEdge
}

"""All input for the create `NorthwindOrderDetail` mutation."""
input CreateNorthwindOrderDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NorthwindOrderDetail` to be created by this mutation."""
  northwindOrderDetail: NorthwindOrderDetailInput!
}

"""The output of our create `NorthwindOrderDetail` mutation."""
type CreateNorthwindOrderDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindOrderDetail` that was created by this mutation."""
  northwindOrderDetail: NorthwindOrderDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Order` that is related to this `NorthwindOrderDetail`."""
  orderByOrderId: Order

  """An edge for our `NorthwindOrderDetail`. May be used by Relay 1."""
  northwindOrderDetailEdge(
    """The method to use when ordering `NorthwindOrderDetail`."""
    orderBy: [NorthwindOrderDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindOrderDetailsEdge
}

"""All input for the create `NorthwindProduct` mutation."""
input CreateNorthwindProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NorthwindProduct` to be created by this mutation."""
  northwindProduct: NorthwindProductInput!
}

"""The output of our create `NorthwindProduct` mutation."""
type CreateNorthwindProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindProduct` that was created by this mutation."""
  northwindProduct: NorthwindProduct

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindProduct`. May be used by Relay 1."""
  northwindProductEdge(
    """The method to use when ordering `NorthwindProduct`."""
    orderBy: [NorthwindProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindProductsEdge
}

"""All input for the create `NorthwindRegion` mutation."""
input CreateNorthwindRegionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NorthwindRegion` to be created by this mutation."""
  northwindRegion: NorthwindRegionInput!
}

"""The output of our create `NorthwindRegion` mutation."""
type CreateNorthwindRegionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindRegion` that was created by this mutation."""
  northwindRegion: NorthwindRegion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindRegion`. May be used by Relay 1."""
  northwindRegionEdge(
    """The method to use when ordering `NorthwindRegion`."""
    orderBy: [NorthwindRegionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindRegionsEdge
}

"""All input for the create `NorthwindShipper` mutation."""
input CreateNorthwindShipperInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NorthwindShipper` to be created by this mutation."""
  northwindShipper: NorthwindShipperInput!
}

"""The output of our create `NorthwindShipper` mutation."""
type CreateNorthwindShipperPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindShipper` that was created by this mutation."""
  northwindShipper: NorthwindShipper

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindShipper`. May be used by Relay 1."""
  northwindShipperEdge(
    """The method to use when ordering `NorthwindShipper`."""
    orderBy: [NorthwindShippersOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindShippersEdge
}

"""All input for the create `NorthwindSupplier` mutation."""
input CreateNorthwindSupplierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NorthwindSupplier` to be created by this mutation."""
  northwindSupplier: NorthwindSupplierInput!
}

"""The output of our create `NorthwindSupplier` mutation."""
type CreateNorthwindSupplierPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindSupplier` that was created by this mutation."""
  northwindSupplier: NorthwindSupplier

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindSupplier`. May be used by Relay 1."""
  northwindSupplierEdge(
    """The method to use when ordering `NorthwindSupplier`."""
    orderBy: [NorthwindSuppliersOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindSuppliersEdge
}

"""All input for the create `NorthwindTerritory` mutation."""
input CreateNorthwindTerritoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NorthwindTerritory` to be created by this mutation."""
  northwindTerritory: NorthwindTerritoryInput!
}

"""The output of our create `NorthwindTerritory` mutation."""
type CreateNorthwindTerritoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindTerritory` that was created by this mutation."""
  northwindTerritory: NorthwindTerritory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindTerritory`. May be used by Relay 1."""
  northwindTerritoryEdge(
    """The method to use when ordering `NorthwindTerritory`."""
    orderBy: [NorthwindTerritoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindTerritoriesEdge
}

"""All input for the create `NorthwindUsState` mutation."""
input CreateNorthwindUsStateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NorthwindUsState` to be created by this mutation."""
  northwindUsState: NorthwindUsStateInput!
}

"""The output of our create `NorthwindUsState` mutation."""
type CreateNorthwindUsStatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindUsState` that was created by this mutation."""
  northwindUsState: NorthwindUsState

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindUsState`. May be used by Relay 1."""
  northwindUsStateEdge(
    """The method to use when ordering `NorthwindUsState`."""
    orderBy: [NorthwindUsStatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindUsStatesEdge
}

"""All input for the create `Order` mutation."""
input CreateOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Order` to be created by this mutation."""
  order: OrderInput!
}

"""The output of our create `Order` mutation."""
type CreateOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Order` that was created by this mutation."""
  order: Order

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Order`. May be used by Relay 1."""
  orderEdge(
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrdersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteBookingByBookid` mutation."""
input DeleteBookingByBookidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  bookid: Int!
}

"""All input for the `deleteBooking` mutation."""
input DeleteBookingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Booking` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Booking` mutation."""
type DeleteBookingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Booking` that was deleted by this mutation."""
  booking: Booking
  deletedBookingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Facility` that is related to this `Booking`."""
  facilityByFacid: Facility

  """Reads a single `Member` that is related to this `Booking`."""
  memberByMemid: Member

  """An edge for our `Booking`. May be used by Relay 1."""
  bookingEdge(
    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingsEdge
}

"""All input for the `deleteChinookAlbumByAlbumId` mutation."""
input DeleteChinookAlbumByAlbumIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  albumId: Int!
}

"""All input for the `deleteChinookAlbum` mutation."""
input DeleteChinookAlbumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookAlbum` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ChinookAlbum` mutation."""
type DeleteChinookAlbumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookAlbum` that was deleted by this mutation."""
  chinookAlbum: ChinookAlbum
  deletedAlbumId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChinookArtist` that is related to this `ChinookAlbum`."""
  chinookArtistByArtistId: ChinookArtist

  """An edge for our `ChinookAlbum`. May be used by Relay 1."""
  chinookAlbumEdge(
    """The method to use when ordering `ChinookAlbum`."""
    orderBy: [ChinookAlbumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookAlbumsEdge
}

"""All input for the `deleteChinookArtistByArtistId` mutation."""
input DeleteChinookArtistByArtistIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  artistId: Int!
}

"""All input for the `deleteChinookArtist` mutation."""
input DeleteChinookArtistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookArtist` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ChinookArtist` mutation."""
type DeleteChinookArtistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookArtist` that was deleted by this mutation."""
  chinookArtist: ChinookArtist
  deletedArtistId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChinookArtist`. May be used by Relay 1."""
  chinookArtistEdge(
    """The method to use when ordering `ChinookArtist`."""
    orderBy: [ChinookArtistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookArtistsEdge
}

"""All input for the `deleteChinookCustomerByCustomerId` mutation."""
input DeleteChinookCustomerByCustomerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  customerId: Int!
}

"""All input for the `deleteChinookCustomer` mutation."""
input DeleteChinookCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookCustomer` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ChinookCustomer` mutation."""
type DeleteChinookCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookCustomer` that was deleted by this mutation."""
  chinookCustomer: ChinookCustomer
  deletedCustomerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookEmployee` that is related to this `ChinookCustomer`.
  """
  chinookEmployeeBySupportRepId: ChinookEmployee

  """An edge for our `ChinookCustomer`. May be used by Relay 1."""
  chinookCustomerEdge(
    """The method to use when ordering `ChinookCustomer`."""
    orderBy: [ChinookCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookCustomersEdge
}

"""All input for the `deleteChinookEmployeeByEmployeeId` mutation."""
input DeleteChinookEmployeeByEmployeeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  employeeId: Int!
}

"""All input for the `deleteChinookEmployee` mutation."""
input DeleteChinookEmployeeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookEmployee` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ChinookEmployee` mutation."""
type DeleteChinookEmployeePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookEmployee` that was deleted by this mutation."""
  chinookEmployee: ChinookEmployee
  deletedEmployeeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookEmployee` that is related to this `ChinookEmployee`.
  """
  chinookEmployeeByReportsTo: ChinookEmployee

  """An edge for our `ChinookEmployee`. May be used by Relay 1."""
  chinookEmployeeEdge(
    """The method to use when ordering `ChinookEmployee`."""
    orderBy: [ChinookEmployeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookEmployeesEdge
}

"""All input for the `deleteChinookGenreByGenreId` mutation."""
input DeleteChinookGenreByGenreIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  genreId: Int!
}

"""All input for the `deleteChinookGenre` mutation."""
input DeleteChinookGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookGenre` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ChinookGenre` mutation."""
type DeleteChinookGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookGenre` that was deleted by this mutation."""
  chinookGenre: ChinookGenre
  deletedGenreId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChinookGenre`. May be used by Relay 1."""
  chinookGenreEdge(
    """The method to use when ordering `ChinookGenre`."""
    orderBy: [ChinookGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookGenresEdge
}

"""All input for the `deleteChinookInvoiceByInvoiceId` mutation."""
input DeleteChinookInvoiceByInvoiceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  invoiceId: Int!
}

"""All input for the `deleteChinookInvoice` mutation."""
input DeleteChinookInvoiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookInvoice` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteChinookInvoicelineByInvoiceLineId` mutation."""
input DeleteChinookInvoicelineByInvoiceLineIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  invoiceLineId: Int!
}

"""All input for the `deleteChinookInvoiceline` mutation."""
input DeleteChinookInvoicelineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookInvoiceline` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ChinookInvoiceline` mutation."""
type DeleteChinookInvoicelinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookInvoiceline` that was deleted by this mutation."""
  chinookInvoiceline: ChinookInvoiceline
  deletedInvoiceLineId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookInvoice` that is related to this `ChinookInvoiceline`.
  """
  chinookInvoiceByInvoiceId: ChinookInvoice

  """
  Reads a single `ChinookTrack` that is related to this `ChinookInvoiceline`.
  """
  chinookTrackByTrackId: ChinookTrack

  """An edge for our `ChinookInvoiceline`. May be used by Relay 1."""
  chinookInvoicelineEdge(
    """The method to use when ordering `ChinookInvoiceline`."""
    orderBy: [ChinookInvoicelinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookInvoicelinesEdge
}

"""The output of our delete `ChinookInvoice` mutation."""
type DeleteChinookInvoicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookInvoice` that was deleted by this mutation."""
  chinookInvoice: ChinookInvoice
  deletedInvoiceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookCustomer` that is related to this `ChinookInvoice`.
  """
  chinookCustomerByCustomerId: ChinookCustomer

  """An edge for our `ChinookInvoice`. May be used by Relay 1."""
  chinookInvoiceEdge(
    """The method to use when ordering `ChinookInvoice`."""
    orderBy: [ChinookInvoicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookInvoicesEdge
}

"""All input for the `deleteChinookMediatypeByMediaTypeId` mutation."""
input DeleteChinookMediatypeByMediaTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mediaTypeId: Int!
}

"""All input for the `deleteChinookMediatype` mutation."""
input DeleteChinookMediatypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookMediatype` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ChinookMediatype` mutation."""
type DeleteChinookMediatypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookMediatype` that was deleted by this mutation."""
  chinookMediatype: ChinookMediatype
  deletedMediaTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChinookMediatype`. May be used by Relay 1."""
  chinookMediatypeEdge(
    """The method to use when ordering `ChinookMediatype`."""
    orderBy: [ChinookMediatypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookMediatypesEdge
}

"""All input for the `deleteChinookPlaylistByPlaylistId` mutation."""
input DeleteChinookPlaylistByPlaylistIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playlistId: Int!
}

"""All input for the `deleteChinookPlaylist` mutation."""
input DeleteChinookPlaylistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookPlaylist` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ChinookPlaylist` mutation."""
type DeleteChinookPlaylistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookPlaylist` that was deleted by this mutation."""
  chinookPlaylist: ChinookPlaylist
  deletedPlaylistId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChinookPlaylist`. May be used by Relay 1."""
  chinookPlaylistEdge(
    """The method to use when ordering `ChinookPlaylist`."""
    orderBy: [ChinookPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookPlaylistsEdge
}

"""
All input for the `deleteChinookPlaylisttrackByPlaylistIdAndTrackId` mutation.
"""
input DeleteChinookPlaylisttrackByPlaylistIdAndTrackIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playlistId: Int!
  trackId: Int!
}

"""All input for the `deleteChinookPlaylisttrack` mutation."""
input DeleteChinookPlaylisttrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookPlaylisttrack` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ChinookPlaylisttrack` mutation."""
type DeleteChinookPlaylisttrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookPlaylisttrack` that was deleted by this mutation."""
  chinookPlaylisttrack: ChinookPlaylisttrack
  deletedPlaylistTrackId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookPlaylist` that is related to this `ChinookPlaylisttrack`.
  """
  chinookPlaylistByPlaylistId: ChinookPlaylist

  """
  Reads a single `ChinookTrack` that is related to this `ChinookPlaylisttrack`.
  """
  chinookTrackByTrackId: ChinookTrack

  """An edge for our `ChinookPlaylisttrack`. May be used by Relay 1."""
  chinookPlaylisttrackEdge(
    """The method to use when ordering `ChinookPlaylisttrack`."""
    orderBy: [ChinookPlaylisttracksOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookPlaylisttracksEdge
}

"""All input for the `deleteChinookTrackByTrackId` mutation."""
input DeleteChinookTrackByTrackIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  trackId: Int!
}

"""All input for the `deleteChinookTrack` mutation."""
input DeleteChinookTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookTrack` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ChinookTrack` mutation."""
type DeleteChinookTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookTrack` that was deleted by this mutation."""
  chinookTrack: ChinookTrack
  deletedTrackId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChinookAlbum` that is related to this `ChinookTrack`."""
  chinookAlbumByAlbumId: ChinookAlbum

  """
  Reads a single `ChinookMediatype` that is related to this `ChinookTrack`.
  """
  chinookMediatypeByMediaTypeId: ChinookMediatype

  """Reads a single `ChinookGenre` that is related to this `ChinookTrack`."""
  chinookGenreByGenreId: ChinookGenre

  """An edge for our `ChinookTrack`. May be used by Relay 1."""
  chinookTrackEdge(
    """The method to use when ordering `ChinookTrack`."""
    orderBy: [ChinookTracksOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookTracksEdge
}

"""All input for the `deleteEmployeeByEmployeeId` mutation."""
input DeleteEmployeeByEmployeeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  employeeId: Int!
}

"""All input for the `deleteEmployee` mutation."""
input DeleteEmployeeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Employee` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Employee` mutation."""
type DeleteEmployeePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Employee` that was deleted by this mutation."""
  employee: Employee
  deletedEmployeeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Employee`. May be used by Relay 1."""
  employeeEdge(
    """The method to use when ordering `Employee`."""
    orderBy: [EmployeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmployeesEdge
}

"""All input for the `deleteFacilityByFacid` mutation."""
input DeleteFacilityByFacidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facid: Int!
}

"""All input for the `deleteFacility` mutation."""
input DeleteFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Facility` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Facility` mutation."""
type DeleteFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was deleted by this mutation."""
  facility: Facility
  deletedFacilityId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge
}

"""All input for the `deleteMemberByMemid` mutation."""
input DeleteMemberByMemidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  memid: Int!
}

"""All input for the `deleteMember` mutation."""
input DeleteMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Member` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Member` mutation."""
type DeleteMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was deleted by this mutation."""
  member: Member
  deletedMemberId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Member` that is related to this `Member`."""
  memberByRecommendedby: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge
}

"""All input for the `deleteNorthwindCategoryByCategoryId` mutation."""
input DeleteNorthwindCategoryByCategoryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  categoryId: Int!
}

"""All input for the `deleteNorthwindCategory` mutation."""
input DeleteNorthwindCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindCategory` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NorthwindCategory` mutation."""
type DeleteNorthwindCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindCategory` that was deleted by this mutation."""
  northwindCategory: NorthwindCategory
  deletedCategoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindCategory`. May be used by Relay 1."""
  northwindCategoryEdge(
    """The method to use when ordering `NorthwindCategory`."""
    orderBy: [NorthwindCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindCategoriesEdge
}

"""All input for the `deleteNorthwindCustomerByCustomerId` mutation."""
input DeleteNorthwindCustomerByCustomerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  customerId: String!
}

"""
All input for the `deleteNorthwindCustomerCustomerDemoByCustomerIdAndCustomerTypeId` mutation.
"""
input DeleteNorthwindCustomerCustomerDemoByCustomerIdAndCustomerTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  customerId: String!
  customerTypeId: String!
}

"""All input for the `deleteNorthwindCustomerCustomerDemo` mutation."""
input DeleteNorthwindCustomerCustomerDemoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindCustomerCustomerDemo` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NorthwindCustomerCustomerDemo` mutation."""
type DeleteNorthwindCustomerCustomerDemoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindCustomerCustomerDemo` that was deleted by this mutation."""
  northwindCustomerCustomerDemo: NorthwindCustomerCustomerDemo
  deletedCustomerCustomerDemoId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `NorthwindCustomer` that is related to this `NorthwindCustomerCustomerDemo`.
  """
  northwindCustomerByCustomerId: NorthwindCustomer

  """
  An edge for our `NorthwindCustomerCustomerDemo`. May be used by Relay 1.
  """
  northwindCustomerCustomerDemoEdge(
    """The method to use when ordering `NorthwindCustomerCustomerDemo`."""
    orderBy: [NorthwindCustomerCustomerDemosOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindCustomerCustomerDemosEdge
}

"""
All input for the `deleteNorthwindCustomerDemographicByCustomerTypeId` mutation.
"""
input DeleteNorthwindCustomerDemographicByCustomerTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  customerTypeId: String!
}

"""All input for the `deleteNorthwindCustomerDemographic` mutation."""
input DeleteNorthwindCustomerDemographicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindCustomerDemographic` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NorthwindCustomerDemographic` mutation."""
type DeleteNorthwindCustomerDemographicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindCustomerDemographic` that was deleted by this mutation."""
  northwindCustomerDemographic: NorthwindCustomerDemographic
  deletedCustomerDemographicId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `NorthwindCustomerDemographic`. May be used by Relay 1.
  """
  northwindCustomerDemographicEdge(
    """The method to use when ordering `NorthwindCustomerDemographic`."""
    orderBy: [NorthwindCustomerDemographicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindCustomerDemographicsEdge
}

"""All input for the `deleteNorthwindCustomer` mutation."""
input DeleteNorthwindCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindCustomer` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NorthwindCustomer` mutation."""
type DeleteNorthwindCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindCustomer` that was deleted by this mutation."""
  northwindCustomer: NorthwindCustomer
  deletedCustomerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindCustomer`. May be used by Relay 1."""
  northwindCustomerEdge(
    """The method to use when ordering `NorthwindCustomer`."""
    orderBy: [NorthwindCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindCustomersEdge
}

"""
All input for the `deleteNorthwindEmployeeTerritoryByEmployeeIdAndTerritoryId` mutation.
"""
input DeleteNorthwindEmployeeTerritoryByEmployeeIdAndTerritoryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  employeeId: Int!
  territoryId: String!
}

"""All input for the `deleteNorthwindEmployeeTerritory` mutation."""
input DeleteNorthwindEmployeeTerritoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindEmployeeTerritory` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NorthwindEmployeeTerritory` mutation."""
type DeleteNorthwindEmployeeTerritoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindEmployeeTerritory` that was deleted by this mutation."""
  northwindEmployeeTerritory: NorthwindEmployeeTerritory
  deletedEmployeeTerritoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Employee` that is related to this `NorthwindEmployeeTerritory`.
  """
  employeeByEmployeeId: Employee

  """An edge for our `NorthwindEmployeeTerritory`. May be used by Relay 1."""
  northwindEmployeeTerritoryEdge(
    """The method to use when ordering `NorthwindEmployeeTerritory`."""
    orderBy: [NorthwindEmployeeTerritoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindEmployeeTerritoriesEdge
}

"""
All input for the `deleteNorthwindOrderDetailByOrderIdAndProductId` mutation.
"""
input DeleteNorthwindOrderDetailByOrderIdAndProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  orderId: Int!
  productId: Int!
}

"""All input for the `deleteNorthwindOrderDetail` mutation."""
input DeleteNorthwindOrderDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindOrderDetail` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NorthwindOrderDetail` mutation."""
type DeleteNorthwindOrderDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindOrderDetail` that was deleted by this mutation."""
  northwindOrderDetail: NorthwindOrderDetail
  deletedOrderDetailId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Order` that is related to this `NorthwindOrderDetail`."""
  orderByOrderId: Order

  """An edge for our `NorthwindOrderDetail`. May be used by Relay 1."""
  northwindOrderDetailEdge(
    """The method to use when ordering `NorthwindOrderDetail`."""
    orderBy: [NorthwindOrderDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindOrderDetailsEdge
}

"""All input for the `deleteNorthwindProductByProductId` mutation."""
input DeleteNorthwindProductByProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  productId: Int!
}

"""All input for the `deleteNorthwindProduct` mutation."""
input DeleteNorthwindProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindProduct` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NorthwindProduct` mutation."""
type DeleteNorthwindProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindProduct` that was deleted by this mutation."""
  northwindProduct: NorthwindProduct
  deletedProductId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindProduct`. May be used by Relay 1."""
  northwindProductEdge(
    """The method to use when ordering `NorthwindProduct`."""
    orderBy: [NorthwindProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindProductsEdge
}

"""All input for the `deleteNorthwindRegionByRegionId` mutation."""
input DeleteNorthwindRegionByRegionIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  regionId: Int!
}

"""All input for the `deleteNorthwindRegion` mutation."""
input DeleteNorthwindRegionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindRegion` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NorthwindRegion` mutation."""
type DeleteNorthwindRegionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindRegion` that was deleted by this mutation."""
  northwindRegion: NorthwindRegion
  deletedRegionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindRegion`. May be used by Relay 1."""
  northwindRegionEdge(
    """The method to use when ordering `NorthwindRegion`."""
    orderBy: [NorthwindRegionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindRegionsEdge
}

"""All input for the `deleteNorthwindShipperByShipperId` mutation."""
input DeleteNorthwindShipperByShipperIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  shipperId: Int!
}

"""All input for the `deleteNorthwindShipper` mutation."""
input DeleteNorthwindShipperInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindShipper` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NorthwindShipper` mutation."""
type DeleteNorthwindShipperPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindShipper` that was deleted by this mutation."""
  northwindShipper: NorthwindShipper
  deletedShipperId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindShipper`. May be used by Relay 1."""
  northwindShipperEdge(
    """The method to use when ordering `NorthwindShipper`."""
    orderBy: [NorthwindShippersOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindShippersEdge
}

"""All input for the `deleteNorthwindSupplierBySupplierId` mutation."""
input DeleteNorthwindSupplierBySupplierIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  supplierId: Int!
}

"""All input for the `deleteNorthwindSupplier` mutation."""
input DeleteNorthwindSupplierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindSupplier` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NorthwindSupplier` mutation."""
type DeleteNorthwindSupplierPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindSupplier` that was deleted by this mutation."""
  northwindSupplier: NorthwindSupplier
  deletedSupplierId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindSupplier`. May be used by Relay 1."""
  northwindSupplierEdge(
    """The method to use when ordering `NorthwindSupplier`."""
    orderBy: [NorthwindSuppliersOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindSuppliersEdge
}

"""All input for the `deleteNorthwindTerritoryByTerritoryId` mutation."""
input DeleteNorthwindTerritoryByTerritoryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  territoryId: String!
}

"""All input for the `deleteNorthwindTerritory` mutation."""
input DeleteNorthwindTerritoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindTerritory` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NorthwindTerritory` mutation."""
type DeleteNorthwindTerritoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindTerritory` that was deleted by this mutation."""
  northwindTerritory: NorthwindTerritory
  deletedTerritoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindTerritory`. May be used by Relay 1."""
  northwindTerritoryEdge(
    """The method to use when ordering `NorthwindTerritory`."""
    orderBy: [NorthwindTerritoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindTerritoriesEdge
}

"""All input for the `deleteNorthwindUsStateByStateId` mutation."""
input DeleteNorthwindUsStateByStateIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  stateId: Int!
}

"""All input for the `deleteNorthwindUsState` mutation."""
input DeleteNorthwindUsStateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindUsState` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NorthwindUsState` mutation."""
type DeleteNorthwindUsStatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindUsState` that was deleted by this mutation."""
  northwindUsState: NorthwindUsState
  deletedUsStateId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindUsState`. May be used by Relay 1."""
  northwindUsStateEdge(
    """The method to use when ordering `NorthwindUsState`."""
    orderBy: [NorthwindUsStatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindUsStatesEdge
}

"""All input for the `deleteOrderByOrderId` mutation."""
input DeleteOrderByOrderIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  orderId: Int!
}

"""All input for the `deleteOrder` mutation."""
input DeleteOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Order` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Order` mutation."""
type DeleteOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Order` that was deleted by this mutation."""
  order: Order
  deletedOrderId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Order`. May be used by Relay 1."""
  orderEdge(
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrdersEdge
}

type Employee implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  employeeId: Int!
  lastName: String!
  firstName: String!
  title: String
  titleOfCourtesy: String
  birthDate: Date
  hireDate: Date
  address: String
  city: String
  region: String
  postalCode: String
  country: String
  homePhone: String
  extension: String
  photo: String
  notes: String
  reportsTo: Int
  photoPath: String

  """
  Reads and enables pagination through a set of `NorthwindEmployeeTerritory`.
  """
  northwindEmployeeTerritoriesByEmployeeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindEmployeeTerritory`."""
    orderBy: [NorthwindEmployeeTerritoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindEmployeeTerritoryCondition
  ): NorthwindEmployeeTerritoriesConnection!
}

"""
A condition to be used against `Employee` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EmployeeCondition {
  """Checks for equality with the object’s `employeeId` field."""
  employeeId: Int
}

"""An input for mutations affecting `Employee`"""
input EmployeeInput {
  employeeId: Int!
  lastName: String!
  firstName: String!
  title: String
  titleOfCourtesy: String
  birthDate: Date
  hireDate: Date
  address: String
  city: String
  region: String
  postalCode: String
  country: String
  homePhone: String
  extension: String
  photo: String
  notes: String
  reportsTo: Int
  photoPath: String
}

"""
Represents an update to a `Employee`. Fields that are set will be updated.
"""
input EmployeePatch {
  employeeId: Int
  lastName: String
  firstName: String
  title: String
  titleOfCourtesy: String
  birthDate: Date
  hireDate: Date
  address: String
  city: String
  region: String
  postalCode: String
  country: String
  homePhone: String
  extension: String
  photo: String
  notes: String
  reportsTo: Int
  photoPath: String
}

"""A connection to a list of `Employee` values."""
type EmployeesConnection {
  """A list of `Employee` objects."""
  nodes: [Employee!]!

  """
  A list of edges which contains the `Employee` and cursor to aid in pagination.
  """
  edges: [EmployeesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Employee` you could get from the connection."""
  totalCount: Int!
}

"""A `Employee` edge in the connection."""
type EmployeesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Employee` at the end of the edge."""
  node: Employee!
}

"""Methods to use when ordering `Employee`."""
enum EmployeesOrderBy {
  NATURAL
  EMPLOYEE_ID_ASC
  EMPLOYEE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Facility` values."""
type FacilitiesConnection {
  """A list of `Facility` objects."""
  nodes: [Facility!]!

  """
  A list of edges which contains the `Facility` and cursor to aid in pagination.
  """
  edges: [FacilitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection."""
type FacilitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Facility` at the end of the edge."""
  node: Facility!
}

"""Methods to use when ordering `Facility`."""
enum FacilitiesOrderBy {
  NATURAL
  FACID_ASC
  FACID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Facility implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  facid: Int!
  name: String!
  membercost: BigFloat!
  guestcost: BigFloat!
  initialoutlay: BigFloat!
  monthlymaintenance: BigFloat!

  """Reads and enables pagination through a set of `Booking`."""
  bookingsByFacid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingCondition
  ): BookingsConnection!
}

"""
A condition to be used against `Facility` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FacilityCondition {
  """Checks for equality with the object’s `facid` field."""
  facid: Int
}

"""An input for mutations affecting `Facility`"""
input FacilityInput {
  facid: Int!
  name: String!
  membercost: BigFloat!
  guestcost: BigFloat!
  initialoutlay: BigFloat!
  monthlymaintenance: BigFloat!
}

"""
Represents an update to a `Facility`. Fields that are set will be updated.
"""
input FacilityPatch {
  facid: Int
  name: String
  membercost: BigFloat
  guestcost: BigFloat
  initialoutlay: BigFloat
  monthlymaintenance: BigFloat
}

type Member implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  memid: Int!
  surname: String!
  firstname: String!
  address: String!
  zipcode: Int!
  telephone: String!
  recommendedby: Int
  joindate: Datetime!

  """Reads a single `Member` that is related to this `Member`."""
  memberByRecommendedby: Member

  """Reads and enables pagination through a set of `Member`."""
  membersByRecommendedby(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MemberCondition
  ): MembersConnection!

  """Reads and enables pagination through a set of `Booking`."""
  bookingsByMemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingCondition
  ): BookingsConnection!
}

"""
A condition to be used against `Member` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MemberCondition {
  """Checks for equality with the object’s `memid` field."""
  memid: Int

  """Checks for equality with the object’s `recommendedby` field."""
  recommendedby: Int

  """Checks for equality with the object’s `joindate` field."""
  joindate: Datetime
}

"""An input for mutations affecting `Member`"""
input MemberInput {
  memid: Int!
  surname: String!
  firstname: String!
  address: String!
  zipcode: Int!
  telephone: String!
  recommendedby: Int
  joindate: Datetime!
}

"""
Represents an update to a `Member`. Fields that are set will be updated.
"""
input MemberPatch {
  memid: Int
  surname: String
  firstname: String
  address: String
  zipcode: Int
  telephone: String
  recommendedby: Int
  joindate: Datetime
}

"""A connection to a list of `Member` values."""
type MembersConnection {
  """A list of `Member` objects."""
  nodes: [Member!]!

  """
  A list of edges which contains the `Member` and cursor to aid in pagination.
  """
  edges: [MembersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Member` you could get from the connection."""
  totalCount: Int!
}

"""A `Member` edge in the connection."""
type MembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Member` at the end of the edge."""
  node: Member!
}

"""Methods to use when ordering `Member`."""
enum MembersOrderBy {
  NATURAL
  MEMID_ASC
  MEMID_DESC
  RECOMMENDEDBY_ASC
  RECOMMENDEDBY_DESC
  JOINDATE_ASC
  JOINDATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `ChinookAlbum`."""
  createChinookAlbum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChinookAlbumInput!
  ): CreateChinookAlbumPayload

  """Creates a single `ChinookArtist`."""
  createChinookArtist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChinookArtistInput!
  ): CreateChinookArtistPayload

  """Creates a single `ChinookCustomer`."""
  createChinookCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChinookCustomerInput!
  ): CreateChinookCustomerPayload

  """Creates a single `ChinookEmployee`."""
  createChinookEmployee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChinookEmployeeInput!
  ): CreateChinookEmployeePayload

  """Creates a single `ChinookGenre`."""
  createChinookGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChinookGenreInput!
  ): CreateChinookGenrePayload

  """Creates a single `ChinookInvoice`."""
  createChinookInvoice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChinookInvoiceInput!
  ): CreateChinookInvoicePayload

  """Creates a single `ChinookInvoiceline`."""
  createChinookInvoiceline(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChinookInvoicelineInput!
  ): CreateChinookInvoicelinePayload

  """Creates a single `ChinookMediatype`."""
  createChinookMediatype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChinookMediatypeInput!
  ): CreateChinookMediatypePayload

  """Creates a single `ChinookPlaylist`."""
  createChinookPlaylist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChinookPlaylistInput!
  ): CreateChinookPlaylistPayload

  """Creates a single `ChinookPlaylisttrack`."""
  createChinookPlaylisttrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChinookPlaylisttrackInput!
  ): CreateChinookPlaylisttrackPayload

  """Creates a single `ChinookTrack`."""
  createChinookTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChinookTrackInput!
  ): CreateChinookTrackPayload

  """Creates a single `NorthwindCategory`."""
  createNorthwindCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNorthwindCategoryInput!
  ): CreateNorthwindCategoryPayload

  """Creates a single `NorthwindCustomerCustomerDemo`."""
  createNorthwindCustomerCustomerDemo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNorthwindCustomerCustomerDemoInput!
  ): CreateNorthwindCustomerCustomerDemoPayload

  """Creates a single `NorthwindCustomerDemographic`."""
  createNorthwindCustomerDemographic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNorthwindCustomerDemographicInput!
  ): CreateNorthwindCustomerDemographicPayload

  """Creates a single `NorthwindCustomer`."""
  createNorthwindCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNorthwindCustomerInput!
  ): CreateNorthwindCustomerPayload

  """Creates a single `NorthwindEmployeeTerritory`."""
  createNorthwindEmployeeTerritory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNorthwindEmployeeTerritoryInput!
  ): CreateNorthwindEmployeeTerritoryPayload

  """Creates a single `Employee`."""
  createEmployee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmployeeInput!
  ): CreateEmployeePayload

  """Creates a single `NorthwindOrderDetail`."""
  createNorthwindOrderDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNorthwindOrderDetailInput!
  ): CreateNorthwindOrderDetailPayload

  """Creates a single `Order`."""
  createOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrderInput!
  ): CreateOrderPayload

  """Creates a single `NorthwindProduct`."""
  createNorthwindProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNorthwindProductInput!
  ): CreateNorthwindProductPayload

  """Creates a single `NorthwindRegion`."""
  createNorthwindRegion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNorthwindRegionInput!
  ): CreateNorthwindRegionPayload

  """Creates a single `NorthwindShipper`."""
  createNorthwindShipper(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNorthwindShipperInput!
  ): CreateNorthwindShipperPayload

  """Creates a single `NorthwindSupplier`."""
  createNorthwindSupplier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNorthwindSupplierInput!
  ): CreateNorthwindSupplierPayload

  """Creates a single `NorthwindTerritory`."""
  createNorthwindTerritory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNorthwindTerritoryInput!
  ): CreateNorthwindTerritoryPayload

  """Creates a single `NorthwindUsState`."""
  createNorthwindUsState(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNorthwindUsStateInput!
  ): CreateNorthwindUsStatePayload

  """Creates a single `Booking`."""
  createBooking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBookingInput!
  ): CreateBookingPayload

  """Creates a single `Facility`."""
  createFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFacilityInput!
  ): CreateFacilityPayload

  """Creates a single `Member`."""
  createMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMemberInput!
  ): CreateMemberPayload

  """
  Updates a single `ChinookAlbum` using its globally unique id and a patch.
  """
  updateChinookAlbum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookAlbumInput!
  ): UpdateChinookAlbumPayload

  """Updates a single `ChinookAlbum` using a unique key and a patch."""
  updateChinookAlbumByAlbumId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookAlbumByAlbumIdInput!
  ): UpdateChinookAlbumPayload

  """
  Updates a single `ChinookArtist` using its globally unique id and a patch.
  """
  updateChinookArtist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookArtistInput!
  ): UpdateChinookArtistPayload

  """Updates a single `ChinookArtist` using a unique key and a patch."""
  updateChinookArtistByArtistId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookArtistByArtistIdInput!
  ): UpdateChinookArtistPayload

  """
  Updates a single `ChinookCustomer` using its globally unique id and a patch.
  """
  updateChinookCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookCustomerInput!
  ): UpdateChinookCustomerPayload

  """Updates a single `ChinookCustomer` using a unique key and a patch."""
  updateChinookCustomerByCustomerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookCustomerByCustomerIdInput!
  ): UpdateChinookCustomerPayload

  """
  Updates a single `ChinookEmployee` using its globally unique id and a patch.
  """
  updateChinookEmployee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookEmployeeInput!
  ): UpdateChinookEmployeePayload

  """Updates a single `ChinookEmployee` using a unique key and a patch."""
  updateChinookEmployeeByEmployeeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookEmployeeByEmployeeIdInput!
  ): UpdateChinookEmployeePayload

  """
  Updates a single `ChinookGenre` using its globally unique id and a patch.
  """
  updateChinookGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookGenreInput!
  ): UpdateChinookGenrePayload

  """Updates a single `ChinookGenre` using a unique key and a patch."""
  updateChinookGenreByGenreId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookGenreByGenreIdInput!
  ): UpdateChinookGenrePayload

  """
  Updates a single `ChinookInvoice` using its globally unique id and a patch.
  """
  updateChinookInvoice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookInvoiceInput!
  ): UpdateChinookInvoicePayload

  """Updates a single `ChinookInvoice` using a unique key and a patch."""
  updateChinookInvoiceByInvoiceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookInvoiceByInvoiceIdInput!
  ): UpdateChinookInvoicePayload

  """
  Updates a single `ChinookInvoiceline` using its globally unique id and a patch.
  """
  updateChinookInvoiceline(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookInvoicelineInput!
  ): UpdateChinookInvoicelinePayload

  """Updates a single `ChinookInvoiceline` using a unique key and a patch."""
  updateChinookInvoicelineByInvoiceLineId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookInvoicelineByInvoiceLineIdInput!
  ): UpdateChinookInvoicelinePayload

  """
  Updates a single `ChinookMediatype` using its globally unique id and a patch.
  """
  updateChinookMediatype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookMediatypeInput!
  ): UpdateChinookMediatypePayload

  """Updates a single `ChinookMediatype` using a unique key and a patch."""
  updateChinookMediatypeByMediaTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookMediatypeByMediaTypeIdInput!
  ): UpdateChinookMediatypePayload

  """
  Updates a single `ChinookPlaylist` using its globally unique id and a patch.
  """
  updateChinookPlaylist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookPlaylistInput!
  ): UpdateChinookPlaylistPayload

  """Updates a single `ChinookPlaylist` using a unique key and a patch."""
  updateChinookPlaylistByPlaylistId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookPlaylistByPlaylistIdInput!
  ): UpdateChinookPlaylistPayload

  """
  Updates a single `ChinookPlaylisttrack` using its globally unique id and a patch.
  """
  updateChinookPlaylisttrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookPlaylisttrackInput!
  ): UpdateChinookPlaylisttrackPayload

  """
  Updates a single `ChinookPlaylisttrack` using a unique key and a patch.
  """
  updateChinookPlaylisttrackByPlaylistIdAndTrackId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookPlaylisttrackByPlaylistIdAndTrackIdInput!
  ): UpdateChinookPlaylisttrackPayload

  """
  Updates a single `ChinookTrack` using its globally unique id and a patch.
  """
  updateChinookTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookTrackInput!
  ): UpdateChinookTrackPayload

  """Updates a single `ChinookTrack` using a unique key and a patch."""
  updateChinookTrackByTrackId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChinookTrackByTrackIdInput!
  ): UpdateChinookTrackPayload

  """
  Updates a single `NorthwindCategory` using its globally unique id and a patch.
  """
  updateNorthwindCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindCategoryInput!
  ): UpdateNorthwindCategoryPayload

  """Updates a single `NorthwindCategory` using a unique key and a patch."""
  updateNorthwindCategoryByCategoryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindCategoryByCategoryIdInput!
  ): UpdateNorthwindCategoryPayload

  """
  Updates a single `NorthwindCustomerCustomerDemo` using its globally unique id and a patch.
  """
  updateNorthwindCustomerCustomerDemo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindCustomerCustomerDemoInput!
  ): UpdateNorthwindCustomerCustomerDemoPayload

  """
  Updates a single `NorthwindCustomerCustomerDemo` using a unique key and a patch.
  """
  updateNorthwindCustomerCustomerDemoByCustomerIdAndCustomerTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindCustomerCustomerDemoByCustomerIdAndCustomerTypeIdInput!
  ): UpdateNorthwindCustomerCustomerDemoPayload

  """
  Updates a single `NorthwindCustomerDemographic` using its globally unique id and a patch.
  """
  updateNorthwindCustomerDemographic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindCustomerDemographicInput!
  ): UpdateNorthwindCustomerDemographicPayload

  """
  Updates a single `NorthwindCustomerDemographic` using a unique key and a patch.
  """
  updateNorthwindCustomerDemographicByCustomerTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindCustomerDemographicByCustomerTypeIdInput!
  ): UpdateNorthwindCustomerDemographicPayload

  """
  Updates a single `NorthwindCustomer` using its globally unique id and a patch.
  """
  updateNorthwindCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindCustomerInput!
  ): UpdateNorthwindCustomerPayload

  """Updates a single `NorthwindCustomer` using a unique key and a patch."""
  updateNorthwindCustomerByCustomerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindCustomerByCustomerIdInput!
  ): UpdateNorthwindCustomerPayload

  """
  Updates a single `NorthwindEmployeeTerritory` using its globally unique id and a patch.
  """
  updateNorthwindEmployeeTerritory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindEmployeeTerritoryInput!
  ): UpdateNorthwindEmployeeTerritoryPayload

  """
  Updates a single `NorthwindEmployeeTerritory` using a unique key and a patch.
  """
  updateNorthwindEmployeeTerritoryByEmployeeIdAndTerritoryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindEmployeeTerritoryByEmployeeIdAndTerritoryIdInput!
  ): UpdateNorthwindEmployeeTerritoryPayload

  """Updates a single `Employee` using its globally unique id and a patch."""
  updateEmployee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmployeeInput!
  ): UpdateEmployeePayload

  """Updates a single `Employee` using a unique key and a patch."""
  updateEmployeeByEmployeeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmployeeByEmployeeIdInput!
  ): UpdateEmployeePayload

  """
  Updates a single `NorthwindOrderDetail` using its globally unique id and a patch.
  """
  updateNorthwindOrderDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindOrderDetailInput!
  ): UpdateNorthwindOrderDetailPayload

  """
  Updates a single `NorthwindOrderDetail` using a unique key and a patch.
  """
  updateNorthwindOrderDetailByOrderIdAndProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindOrderDetailByOrderIdAndProductIdInput!
  ): UpdateNorthwindOrderDetailPayload

  """Updates a single `Order` using its globally unique id and a patch."""
  updateOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrderInput!
  ): UpdateOrderPayload

  """Updates a single `Order` using a unique key and a patch."""
  updateOrderByOrderId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrderByOrderIdInput!
  ): UpdateOrderPayload

  """
  Updates a single `NorthwindProduct` using its globally unique id and a patch.
  """
  updateNorthwindProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindProductInput!
  ): UpdateNorthwindProductPayload

  """Updates a single `NorthwindProduct` using a unique key and a patch."""
  updateNorthwindProductByProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindProductByProductIdInput!
  ): UpdateNorthwindProductPayload

  """
  Updates a single `NorthwindRegion` using its globally unique id and a patch.
  """
  updateNorthwindRegion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindRegionInput!
  ): UpdateNorthwindRegionPayload

  """Updates a single `NorthwindRegion` using a unique key and a patch."""
  updateNorthwindRegionByRegionId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindRegionByRegionIdInput!
  ): UpdateNorthwindRegionPayload

  """
  Updates a single `NorthwindShipper` using its globally unique id and a patch.
  """
  updateNorthwindShipper(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindShipperInput!
  ): UpdateNorthwindShipperPayload

  """Updates a single `NorthwindShipper` using a unique key and a patch."""
  updateNorthwindShipperByShipperId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindShipperByShipperIdInput!
  ): UpdateNorthwindShipperPayload

  """
  Updates a single `NorthwindSupplier` using its globally unique id and a patch.
  """
  updateNorthwindSupplier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindSupplierInput!
  ): UpdateNorthwindSupplierPayload

  """Updates a single `NorthwindSupplier` using a unique key and a patch."""
  updateNorthwindSupplierBySupplierId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindSupplierBySupplierIdInput!
  ): UpdateNorthwindSupplierPayload

  """
  Updates a single `NorthwindTerritory` using its globally unique id and a patch.
  """
  updateNorthwindTerritory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindTerritoryInput!
  ): UpdateNorthwindTerritoryPayload

  """Updates a single `NorthwindTerritory` using a unique key and a patch."""
  updateNorthwindTerritoryByTerritoryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindTerritoryByTerritoryIdInput!
  ): UpdateNorthwindTerritoryPayload

  """
  Updates a single `NorthwindUsState` using its globally unique id and a patch.
  """
  updateNorthwindUsState(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindUsStateInput!
  ): UpdateNorthwindUsStatePayload

  """Updates a single `NorthwindUsState` using a unique key and a patch."""
  updateNorthwindUsStateByStateId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNorthwindUsStateByStateIdInput!
  ): UpdateNorthwindUsStatePayload

  """Updates a single `Booking` using its globally unique id and a patch."""
  updateBooking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookingInput!
  ): UpdateBookingPayload

  """Updates a single `Booking` using a unique key and a patch."""
  updateBookingByBookid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBookingByBookidInput!
  ): UpdateBookingPayload

  """Updates a single `Facility` using its globally unique id and a patch."""
  updateFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityInput!
  ): UpdateFacilityPayload

  """Updates a single `Facility` using a unique key and a patch."""
  updateFacilityByFacid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityByFacidInput!
  ): UpdateFacilityPayload

  """Updates a single `Member` using its globally unique id and a patch."""
  updateMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberInput!
  ): UpdateMemberPayload

  """Updates a single `Member` using a unique key and a patch."""
  updateMemberByMemid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberByMemidInput!
  ): UpdateMemberPayload

  """Deletes a single `ChinookAlbum` using its globally unique id."""
  deleteChinookAlbum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookAlbumInput!
  ): DeleteChinookAlbumPayload

  """Deletes a single `ChinookAlbum` using a unique key."""
  deleteChinookAlbumByAlbumId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookAlbumByAlbumIdInput!
  ): DeleteChinookAlbumPayload

  """Deletes a single `ChinookArtist` using its globally unique id."""
  deleteChinookArtist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookArtistInput!
  ): DeleteChinookArtistPayload

  """Deletes a single `ChinookArtist` using a unique key."""
  deleteChinookArtistByArtistId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookArtistByArtistIdInput!
  ): DeleteChinookArtistPayload

  """Deletes a single `ChinookCustomer` using its globally unique id."""
  deleteChinookCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookCustomerInput!
  ): DeleteChinookCustomerPayload

  """Deletes a single `ChinookCustomer` using a unique key."""
  deleteChinookCustomerByCustomerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookCustomerByCustomerIdInput!
  ): DeleteChinookCustomerPayload

  """Deletes a single `ChinookEmployee` using its globally unique id."""
  deleteChinookEmployee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookEmployeeInput!
  ): DeleteChinookEmployeePayload

  """Deletes a single `ChinookEmployee` using a unique key."""
  deleteChinookEmployeeByEmployeeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookEmployeeByEmployeeIdInput!
  ): DeleteChinookEmployeePayload

  """Deletes a single `ChinookGenre` using its globally unique id."""
  deleteChinookGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookGenreInput!
  ): DeleteChinookGenrePayload

  """Deletes a single `ChinookGenre` using a unique key."""
  deleteChinookGenreByGenreId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookGenreByGenreIdInput!
  ): DeleteChinookGenrePayload

  """Deletes a single `ChinookInvoice` using its globally unique id."""
  deleteChinookInvoice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookInvoiceInput!
  ): DeleteChinookInvoicePayload

  """Deletes a single `ChinookInvoice` using a unique key."""
  deleteChinookInvoiceByInvoiceId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookInvoiceByInvoiceIdInput!
  ): DeleteChinookInvoicePayload

  """Deletes a single `ChinookInvoiceline` using its globally unique id."""
  deleteChinookInvoiceline(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookInvoicelineInput!
  ): DeleteChinookInvoicelinePayload

  """Deletes a single `ChinookInvoiceline` using a unique key."""
  deleteChinookInvoicelineByInvoiceLineId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookInvoicelineByInvoiceLineIdInput!
  ): DeleteChinookInvoicelinePayload

  """Deletes a single `ChinookMediatype` using its globally unique id."""
  deleteChinookMediatype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookMediatypeInput!
  ): DeleteChinookMediatypePayload

  """Deletes a single `ChinookMediatype` using a unique key."""
  deleteChinookMediatypeByMediaTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookMediatypeByMediaTypeIdInput!
  ): DeleteChinookMediatypePayload

  """Deletes a single `ChinookPlaylist` using its globally unique id."""
  deleteChinookPlaylist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookPlaylistInput!
  ): DeleteChinookPlaylistPayload

  """Deletes a single `ChinookPlaylist` using a unique key."""
  deleteChinookPlaylistByPlaylistId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookPlaylistByPlaylistIdInput!
  ): DeleteChinookPlaylistPayload

  """Deletes a single `ChinookPlaylisttrack` using its globally unique id."""
  deleteChinookPlaylisttrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookPlaylisttrackInput!
  ): DeleteChinookPlaylisttrackPayload

  """Deletes a single `ChinookPlaylisttrack` using a unique key."""
  deleteChinookPlaylisttrackByPlaylistIdAndTrackId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookPlaylisttrackByPlaylistIdAndTrackIdInput!
  ): DeleteChinookPlaylisttrackPayload

  """Deletes a single `ChinookTrack` using its globally unique id."""
  deleteChinookTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookTrackInput!
  ): DeleteChinookTrackPayload

  """Deletes a single `ChinookTrack` using a unique key."""
  deleteChinookTrackByTrackId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChinookTrackByTrackIdInput!
  ): DeleteChinookTrackPayload

  """Deletes a single `NorthwindCategory` using its globally unique id."""
  deleteNorthwindCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindCategoryInput!
  ): DeleteNorthwindCategoryPayload

  """Deletes a single `NorthwindCategory` using a unique key."""
  deleteNorthwindCategoryByCategoryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindCategoryByCategoryIdInput!
  ): DeleteNorthwindCategoryPayload

  """
  Deletes a single `NorthwindCustomerCustomerDemo` using its globally unique id.
  """
  deleteNorthwindCustomerCustomerDemo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindCustomerCustomerDemoInput!
  ): DeleteNorthwindCustomerCustomerDemoPayload

  """Deletes a single `NorthwindCustomerCustomerDemo` using a unique key."""
  deleteNorthwindCustomerCustomerDemoByCustomerIdAndCustomerTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindCustomerCustomerDemoByCustomerIdAndCustomerTypeIdInput!
  ): DeleteNorthwindCustomerCustomerDemoPayload

  """
  Deletes a single `NorthwindCustomerDemographic` using its globally unique id.
  """
  deleteNorthwindCustomerDemographic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindCustomerDemographicInput!
  ): DeleteNorthwindCustomerDemographicPayload

  """Deletes a single `NorthwindCustomerDemographic` using a unique key."""
  deleteNorthwindCustomerDemographicByCustomerTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindCustomerDemographicByCustomerTypeIdInput!
  ): DeleteNorthwindCustomerDemographicPayload

  """Deletes a single `NorthwindCustomer` using its globally unique id."""
  deleteNorthwindCustomer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindCustomerInput!
  ): DeleteNorthwindCustomerPayload

  """Deletes a single `NorthwindCustomer` using a unique key."""
  deleteNorthwindCustomerByCustomerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindCustomerByCustomerIdInput!
  ): DeleteNorthwindCustomerPayload

  """
  Deletes a single `NorthwindEmployeeTerritory` using its globally unique id.
  """
  deleteNorthwindEmployeeTerritory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindEmployeeTerritoryInput!
  ): DeleteNorthwindEmployeeTerritoryPayload

  """Deletes a single `NorthwindEmployeeTerritory` using a unique key."""
  deleteNorthwindEmployeeTerritoryByEmployeeIdAndTerritoryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindEmployeeTerritoryByEmployeeIdAndTerritoryIdInput!
  ): DeleteNorthwindEmployeeTerritoryPayload

  """Deletes a single `Employee` using its globally unique id."""
  deleteEmployee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmployeeInput!
  ): DeleteEmployeePayload

  """Deletes a single `Employee` using a unique key."""
  deleteEmployeeByEmployeeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmployeeByEmployeeIdInput!
  ): DeleteEmployeePayload

  """Deletes a single `NorthwindOrderDetail` using its globally unique id."""
  deleteNorthwindOrderDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindOrderDetailInput!
  ): DeleteNorthwindOrderDetailPayload

  """Deletes a single `NorthwindOrderDetail` using a unique key."""
  deleteNorthwindOrderDetailByOrderIdAndProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindOrderDetailByOrderIdAndProductIdInput!
  ): DeleteNorthwindOrderDetailPayload

  """Deletes a single `Order` using its globally unique id."""
  deleteOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrderInput!
  ): DeleteOrderPayload

  """Deletes a single `Order` using a unique key."""
  deleteOrderByOrderId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrderByOrderIdInput!
  ): DeleteOrderPayload

  """Deletes a single `NorthwindProduct` using its globally unique id."""
  deleteNorthwindProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindProductInput!
  ): DeleteNorthwindProductPayload

  """Deletes a single `NorthwindProduct` using a unique key."""
  deleteNorthwindProductByProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindProductByProductIdInput!
  ): DeleteNorthwindProductPayload

  """Deletes a single `NorthwindRegion` using its globally unique id."""
  deleteNorthwindRegion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindRegionInput!
  ): DeleteNorthwindRegionPayload

  """Deletes a single `NorthwindRegion` using a unique key."""
  deleteNorthwindRegionByRegionId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindRegionByRegionIdInput!
  ): DeleteNorthwindRegionPayload

  """Deletes a single `NorthwindShipper` using its globally unique id."""
  deleteNorthwindShipper(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindShipperInput!
  ): DeleteNorthwindShipperPayload

  """Deletes a single `NorthwindShipper` using a unique key."""
  deleteNorthwindShipperByShipperId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindShipperByShipperIdInput!
  ): DeleteNorthwindShipperPayload

  """Deletes a single `NorthwindSupplier` using its globally unique id."""
  deleteNorthwindSupplier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindSupplierInput!
  ): DeleteNorthwindSupplierPayload

  """Deletes a single `NorthwindSupplier` using a unique key."""
  deleteNorthwindSupplierBySupplierId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindSupplierBySupplierIdInput!
  ): DeleteNorthwindSupplierPayload

  """Deletes a single `NorthwindTerritory` using its globally unique id."""
  deleteNorthwindTerritory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindTerritoryInput!
  ): DeleteNorthwindTerritoryPayload

  """Deletes a single `NorthwindTerritory` using a unique key."""
  deleteNorthwindTerritoryByTerritoryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindTerritoryByTerritoryIdInput!
  ): DeleteNorthwindTerritoryPayload

  """Deletes a single `NorthwindUsState` using its globally unique id."""
  deleteNorthwindUsState(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindUsStateInput!
  ): DeleteNorthwindUsStatePayload

  """Deletes a single `NorthwindUsState` using a unique key."""
  deleteNorthwindUsStateByStateId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNorthwindUsStateByStateIdInput!
  ): DeleteNorthwindUsStatePayload

  """Deletes a single `Booking` using its globally unique id."""
  deleteBooking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookingInput!
  ): DeleteBookingPayload

  """Deletes a single `Booking` using a unique key."""
  deleteBookingByBookid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBookingByBookidInput!
  ): DeleteBookingPayload

  """Deletes a single `Facility` using its globally unique id."""
  deleteFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityInput!
  ): DeleteFacilityPayload

  """Deletes a single `Facility` using a unique key."""
  deleteFacilityByFacid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityByFacidInput!
  ): DeleteFacilityPayload

  """Deletes a single `Member` using its globally unique id."""
  deleteMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberInput!
  ): DeleteMemberPayload

  """Deletes a single `Member` using a unique key."""
  deleteMemberByMemid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberByMemidInput!
  ): DeleteMemberPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `NorthwindCategory` values."""
type NorthwindCategoriesConnection {
  """A list of `NorthwindCategory` objects."""
  nodes: [NorthwindCategory!]!

  """
  A list of edges which contains the `NorthwindCategory` and cursor to aid in pagination.
  """
  edges: [NorthwindCategoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NorthwindCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NorthwindCategory` edge in the connection."""
type NorthwindCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NorthwindCategory` at the end of the edge."""
  node: NorthwindCategory!
}

"""Methods to use when ordering `NorthwindCategory`."""
enum NorthwindCategoriesOrderBy {
  NATURAL
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type NorthwindCategory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  categoryId: Int!
  categoryName: String!
  description: String
  picture: String
}

"""
A condition to be used against `NorthwindCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NorthwindCategoryCondition {
  """Checks for equality with the object’s `categoryId` field."""
  categoryId: Int
}

"""An input for mutations affecting `NorthwindCategory`"""
input NorthwindCategoryInput {
  categoryId: Int!
  categoryName: String!
  description: String
  picture: String
}

"""
Represents an update to a `NorthwindCategory`. Fields that are set will be updated.
"""
input NorthwindCategoryPatch {
  categoryId: Int
  categoryName: String
  description: String
  picture: String
}

type NorthwindCustomer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  customerId: String!
  companyName: String!
  contactName: String
  contactTitle: String
  address: String
  city: String
  region: String
  postalCode: String
  country: String
  phone: String
  fax: String

  """
  Reads and enables pagination through a set of `NorthwindCustomerCustomerDemo`.
  """
  northwindCustomerCustomerDemosByCustomerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindCustomerCustomerDemo`."""
    orderBy: [NorthwindCustomerCustomerDemosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindCustomerCustomerDemoCondition
  ): NorthwindCustomerCustomerDemosConnection!
}

"""
A condition to be used against `NorthwindCustomer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NorthwindCustomerCondition {
  """Checks for equality with the object’s `customerId` field."""
  customerId: String
}

type NorthwindCustomerCustomerDemo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  customerId: String!
  customerTypeId: String!

  """
  Reads a single `NorthwindCustomer` that is related to this `NorthwindCustomerCustomerDemo`.
  """
  northwindCustomerByCustomerId: NorthwindCustomer
}

"""
A condition to be used against `NorthwindCustomerCustomerDemo` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input NorthwindCustomerCustomerDemoCondition {
  """Checks for equality with the object’s `customerId` field."""
  customerId: String
}

"""An input for mutations affecting `NorthwindCustomerCustomerDemo`"""
input NorthwindCustomerCustomerDemoInput {
  customerId: String!
  customerTypeId: String!
}

"""
Represents an update to a `NorthwindCustomerCustomerDemo`. Fields that are set will be updated.
"""
input NorthwindCustomerCustomerDemoPatch {
  customerId: String
  customerTypeId: String
}

"""A connection to a list of `NorthwindCustomerCustomerDemo` values."""
type NorthwindCustomerCustomerDemosConnection {
  """A list of `NorthwindCustomerCustomerDemo` objects."""
  nodes: [NorthwindCustomerCustomerDemo!]!

  """
  A list of edges which contains the `NorthwindCustomerCustomerDemo` and cursor to aid in pagination.
  """
  edges: [NorthwindCustomerCustomerDemosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NorthwindCustomerCustomerDemo` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NorthwindCustomerCustomerDemo` edge in the connection."""
type NorthwindCustomerCustomerDemosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NorthwindCustomerCustomerDemo` at the end of the edge."""
  node: NorthwindCustomerCustomerDemo!
}

"""Methods to use when ordering `NorthwindCustomerCustomerDemo`."""
enum NorthwindCustomerCustomerDemosOrderBy {
  NATURAL
  CUSTOMER_ID_ASC
  CUSTOMER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type NorthwindCustomerDemographic implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  customerTypeId: String!
  customerDesc: String
}

"""
A condition to be used against `NorthwindCustomerDemographic` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input NorthwindCustomerDemographicCondition {
  """Checks for equality with the object’s `customerTypeId` field."""
  customerTypeId: String
}

"""An input for mutations affecting `NorthwindCustomerDemographic`"""
input NorthwindCustomerDemographicInput {
  customerTypeId: String!
  customerDesc: String
}

"""
Represents an update to a `NorthwindCustomerDemographic`. Fields that are set will be updated.
"""
input NorthwindCustomerDemographicPatch {
  customerTypeId: String
  customerDesc: String
}

"""A connection to a list of `NorthwindCustomerDemographic` values."""
type NorthwindCustomerDemographicsConnection {
  """A list of `NorthwindCustomerDemographic` objects."""
  nodes: [NorthwindCustomerDemographic!]!

  """
  A list of edges which contains the `NorthwindCustomerDemographic` and cursor to aid in pagination.
  """
  edges: [NorthwindCustomerDemographicsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NorthwindCustomerDemographic` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NorthwindCustomerDemographic` edge in the connection."""
type NorthwindCustomerDemographicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NorthwindCustomerDemographic` at the end of the edge."""
  node: NorthwindCustomerDemographic!
}

"""Methods to use when ordering `NorthwindCustomerDemographic`."""
enum NorthwindCustomerDemographicsOrderBy {
  NATURAL
  CUSTOMER_TYPE_ID_ASC
  CUSTOMER_TYPE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `NorthwindCustomer`"""
input NorthwindCustomerInput {
  customerId: String!
  companyName: String!
  contactName: String
  contactTitle: String
  address: String
  city: String
  region: String
  postalCode: String
  country: String
  phone: String
  fax: String
}

"""
Represents an update to a `NorthwindCustomer`. Fields that are set will be updated.
"""
input NorthwindCustomerPatch {
  customerId: String
  companyName: String
  contactName: String
  contactTitle: String
  address: String
  city: String
  region: String
  postalCode: String
  country: String
  phone: String
  fax: String
}

"""A connection to a list of `NorthwindCustomer` values."""
type NorthwindCustomersConnection {
  """A list of `NorthwindCustomer` objects."""
  nodes: [NorthwindCustomer!]!

  """
  A list of edges which contains the `NorthwindCustomer` and cursor to aid in pagination.
  """
  edges: [NorthwindCustomersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NorthwindCustomer` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NorthwindCustomer` edge in the connection."""
type NorthwindCustomersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NorthwindCustomer` at the end of the edge."""
  node: NorthwindCustomer!
}

"""Methods to use when ordering `NorthwindCustomer`."""
enum NorthwindCustomersOrderBy {
  NATURAL
  CUSTOMER_ID_ASC
  CUSTOMER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `NorthwindEmployeeTerritory` values."""
type NorthwindEmployeeTerritoriesConnection {
  """A list of `NorthwindEmployeeTerritory` objects."""
  nodes: [NorthwindEmployeeTerritory!]!

  """
  A list of edges which contains the `NorthwindEmployeeTerritory` and cursor to aid in pagination.
  """
  edges: [NorthwindEmployeeTerritoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NorthwindEmployeeTerritory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NorthwindEmployeeTerritory` edge in the connection."""
type NorthwindEmployeeTerritoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NorthwindEmployeeTerritory` at the end of the edge."""
  node: NorthwindEmployeeTerritory!
}

"""Methods to use when ordering `NorthwindEmployeeTerritory`."""
enum NorthwindEmployeeTerritoriesOrderBy {
  NATURAL
  EMPLOYEE_ID_ASC
  EMPLOYEE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type NorthwindEmployeeTerritory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  employeeId: Int!
  territoryId: String!

  """
  Reads a single `Employee` that is related to this `NorthwindEmployeeTerritory`.
  """
  employeeByEmployeeId: Employee
}

"""
A condition to be used against `NorthwindEmployeeTerritory` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input NorthwindEmployeeTerritoryCondition {
  """Checks for equality with the object’s `employeeId` field."""
  employeeId: Int
}

"""An input for mutations affecting `NorthwindEmployeeTerritory`"""
input NorthwindEmployeeTerritoryInput {
  employeeId: Int!
  territoryId: String!
}

"""
Represents an update to a `NorthwindEmployeeTerritory`. Fields that are set will be updated.
"""
input NorthwindEmployeeTerritoryPatch {
  employeeId: Int
  territoryId: String
}

type NorthwindOrderDetail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  orderId: Int!
  productId: Int!
  unitPrice: Float!
  quantity: Int!
  discount: Float!

  """Reads a single `Order` that is related to this `NorthwindOrderDetail`."""
  orderByOrderId: Order
}

"""
A condition to be used against `NorthwindOrderDetail` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input NorthwindOrderDetailCondition {
  """Checks for equality with the object’s `orderId` field."""
  orderId: Int
}

"""An input for mutations affecting `NorthwindOrderDetail`"""
input NorthwindOrderDetailInput {
  orderId: Int!
  productId: Int!
  unitPrice: Float!
  quantity: Int!
  discount: Float!
}

"""
Represents an update to a `NorthwindOrderDetail`. Fields that are set will be updated.
"""
input NorthwindOrderDetailPatch {
  orderId: Int
  productId: Int
  unitPrice: Float
  quantity: Int
  discount: Float
}

"""A connection to a list of `NorthwindOrderDetail` values."""
type NorthwindOrderDetailsConnection {
  """A list of `NorthwindOrderDetail` objects."""
  nodes: [NorthwindOrderDetail!]!

  """
  A list of edges which contains the `NorthwindOrderDetail` and cursor to aid in pagination.
  """
  edges: [NorthwindOrderDetailsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NorthwindOrderDetail` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NorthwindOrderDetail` edge in the connection."""
type NorthwindOrderDetailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NorthwindOrderDetail` at the end of the edge."""
  node: NorthwindOrderDetail!
}

"""Methods to use when ordering `NorthwindOrderDetail`."""
enum NorthwindOrderDetailsOrderBy {
  NATURAL
  ORDER_ID_ASC
  ORDER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type NorthwindProduct implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  productId: Int!
  productName: String!
  supplierId: Int
  categoryId: Int
  quantityPerUnit: String
  unitPrice: Float
  unitsInStock: Int
  unitsOnOrder: Int
  reorderLevel: Int
  discontinued: Int!
}

"""
A condition to be used against `NorthwindProduct` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NorthwindProductCondition {
  """Checks for equality with the object’s `productId` field."""
  productId: Int
}

"""An input for mutations affecting `NorthwindProduct`"""
input NorthwindProductInput {
  productId: Int!
  productName: String!
  supplierId: Int
  categoryId: Int
  quantityPerUnit: String
  unitPrice: Float
  unitsInStock: Int
  unitsOnOrder: Int
  reorderLevel: Int
  discontinued: Int!
}

"""
Represents an update to a `NorthwindProduct`. Fields that are set will be updated.
"""
input NorthwindProductPatch {
  productId: Int
  productName: String
  supplierId: Int
  categoryId: Int
  quantityPerUnit: String
  unitPrice: Float
  unitsInStock: Int
  unitsOnOrder: Int
  reorderLevel: Int
  discontinued: Int
}

"""A connection to a list of `NorthwindProduct` values."""
type NorthwindProductsConnection {
  """A list of `NorthwindProduct` objects."""
  nodes: [NorthwindProduct!]!

  """
  A list of edges which contains the `NorthwindProduct` and cursor to aid in pagination.
  """
  edges: [NorthwindProductsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NorthwindProduct` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NorthwindProduct` edge in the connection."""
type NorthwindProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NorthwindProduct` at the end of the edge."""
  node: NorthwindProduct!
}

"""Methods to use when ordering `NorthwindProduct`."""
enum NorthwindProductsOrderBy {
  NATURAL
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type NorthwindRegion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  regionId: Int!
  regionDescription: String!
}

"""
A condition to be used against `NorthwindRegion` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NorthwindRegionCondition {
  """Checks for equality with the object’s `regionId` field."""
  regionId: Int
}

"""An input for mutations affecting `NorthwindRegion`"""
input NorthwindRegionInput {
  regionId: Int!
  regionDescription: String!
}

"""
Represents an update to a `NorthwindRegion`. Fields that are set will be updated.
"""
input NorthwindRegionPatch {
  regionId: Int
  regionDescription: String
}

"""A connection to a list of `NorthwindRegion` values."""
type NorthwindRegionsConnection {
  """A list of `NorthwindRegion` objects."""
  nodes: [NorthwindRegion!]!

  """
  A list of edges which contains the `NorthwindRegion` and cursor to aid in pagination.
  """
  edges: [NorthwindRegionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NorthwindRegion` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NorthwindRegion` edge in the connection."""
type NorthwindRegionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NorthwindRegion` at the end of the edge."""
  node: NorthwindRegion!
}

"""Methods to use when ordering `NorthwindRegion`."""
enum NorthwindRegionsOrderBy {
  NATURAL
  REGION_ID_ASC
  REGION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type NorthwindShipper implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  shipperId: Int!
  companyName: String!
  phone: String
}

"""
A condition to be used against `NorthwindShipper` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NorthwindShipperCondition {
  """Checks for equality with the object’s `shipperId` field."""
  shipperId: Int
}

"""An input for mutations affecting `NorthwindShipper`"""
input NorthwindShipperInput {
  shipperId: Int!
  companyName: String!
  phone: String
}

"""
Represents an update to a `NorthwindShipper`. Fields that are set will be updated.
"""
input NorthwindShipperPatch {
  shipperId: Int
  companyName: String
  phone: String
}

"""A connection to a list of `NorthwindShipper` values."""
type NorthwindShippersConnection {
  """A list of `NorthwindShipper` objects."""
  nodes: [NorthwindShipper!]!

  """
  A list of edges which contains the `NorthwindShipper` and cursor to aid in pagination.
  """
  edges: [NorthwindShippersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NorthwindShipper` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NorthwindShipper` edge in the connection."""
type NorthwindShippersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NorthwindShipper` at the end of the edge."""
  node: NorthwindShipper!
}

"""Methods to use when ordering `NorthwindShipper`."""
enum NorthwindShippersOrderBy {
  NATURAL
  SHIPPER_ID_ASC
  SHIPPER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type NorthwindSupplier implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  supplierId: Int!
  companyName: String!
  contactName: String
  contactTitle: String
  address: String
  city: String
  region: String
  postalCode: String
  country: String
  phone: String
  fax: String
  homepage: String
}

"""
A condition to be used against `NorthwindSupplier` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NorthwindSupplierCondition {
  """Checks for equality with the object’s `supplierId` field."""
  supplierId: Int
}

"""An input for mutations affecting `NorthwindSupplier`"""
input NorthwindSupplierInput {
  supplierId: Int!
  companyName: String!
  contactName: String
  contactTitle: String
  address: String
  city: String
  region: String
  postalCode: String
  country: String
  phone: String
  fax: String
  homepage: String
}

"""
Represents an update to a `NorthwindSupplier`. Fields that are set will be updated.
"""
input NorthwindSupplierPatch {
  supplierId: Int
  companyName: String
  contactName: String
  contactTitle: String
  address: String
  city: String
  region: String
  postalCode: String
  country: String
  phone: String
  fax: String
  homepage: String
}

"""A connection to a list of `NorthwindSupplier` values."""
type NorthwindSuppliersConnection {
  """A list of `NorthwindSupplier` objects."""
  nodes: [NorthwindSupplier!]!

  """
  A list of edges which contains the `NorthwindSupplier` and cursor to aid in pagination.
  """
  edges: [NorthwindSuppliersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NorthwindSupplier` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NorthwindSupplier` edge in the connection."""
type NorthwindSuppliersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NorthwindSupplier` at the end of the edge."""
  node: NorthwindSupplier!
}

"""Methods to use when ordering `NorthwindSupplier`."""
enum NorthwindSuppliersOrderBy {
  NATURAL
  SUPPLIER_ID_ASC
  SUPPLIER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `NorthwindTerritory` values."""
type NorthwindTerritoriesConnection {
  """A list of `NorthwindTerritory` objects."""
  nodes: [NorthwindTerritory!]!

  """
  A list of edges which contains the `NorthwindTerritory` and cursor to aid in pagination.
  """
  edges: [NorthwindTerritoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NorthwindTerritory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NorthwindTerritory` edge in the connection."""
type NorthwindTerritoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NorthwindTerritory` at the end of the edge."""
  node: NorthwindTerritory!
}

"""Methods to use when ordering `NorthwindTerritory`."""
enum NorthwindTerritoriesOrderBy {
  NATURAL
  TERRITORY_ID_ASC
  TERRITORY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type NorthwindTerritory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  territoryId: String!
  territoryDescription: String!
  regionId: Int!
}

"""
A condition to be used against `NorthwindTerritory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NorthwindTerritoryCondition {
  """Checks for equality with the object’s `territoryId` field."""
  territoryId: String
}

"""An input for mutations affecting `NorthwindTerritory`"""
input NorthwindTerritoryInput {
  territoryId: String!
  territoryDescription: String!
  regionId: Int!
}

"""
Represents an update to a `NorthwindTerritory`. Fields that are set will be updated.
"""
input NorthwindTerritoryPatch {
  territoryId: String
  territoryDescription: String
  regionId: Int
}

type NorthwindUsState implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  stateId: Int!
  stateName: String
  stateAbbr: String
  stateRegion: String
}

"""
A condition to be used against `NorthwindUsState` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NorthwindUsStateCondition {
  """Checks for equality with the object’s `stateId` field."""
  stateId: Int
}

"""An input for mutations affecting `NorthwindUsState`"""
input NorthwindUsStateInput {
  stateId: Int!
  stateName: String
  stateAbbr: String
  stateRegion: String
}

"""
Represents an update to a `NorthwindUsState`. Fields that are set will be updated.
"""
input NorthwindUsStatePatch {
  stateId: Int
  stateName: String
  stateAbbr: String
  stateRegion: String
}

"""A connection to a list of `NorthwindUsState` values."""
type NorthwindUsStatesConnection {
  """A list of `NorthwindUsState` objects."""
  nodes: [NorthwindUsState!]!

  """
  A list of edges which contains the `NorthwindUsState` and cursor to aid in pagination.
  """
  edges: [NorthwindUsStatesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NorthwindUsState` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NorthwindUsState` edge in the connection."""
type NorthwindUsStatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NorthwindUsState` at the end of the edge."""
  node: NorthwindUsState!
}

"""Methods to use when ordering `NorthwindUsState`."""
enum NorthwindUsStatesOrderBy {
  NATURAL
  STATE_ID_ASC
  STATE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Order implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  orderId: Int!
  customerId: String
  employeeId: Int
  orderDate: Date
  requiredDate: Date
  shippedDate: Date
  shipVia: Int
  freight: Float
  shipName: String
  shipAddress: String
  shipCity: String
  shipRegion: String
  shipPostalCode: String
  shipCountry: String

  """Reads and enables pagination through a set of `NorthwindOrderDetail`."""
  northwindOrderDetailsByOrderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindOrderDetail`."""
    orderBy: [NorthwindOrderDetailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindOrderDetailCondition
  ): NorthwindOrderDetailsConnection!
}

"""
A condition to be used against `Order` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input OrderCondition {
  """Checks for equality with the object’s `orderId` field."""
  orderId: Int
}

"""An input for mutations affecting `Order`"""
input OrderInput {
  orderId: Int!
  customerId: String
  employeeId: Int
  orderDate: Date
  requiredDate: Date
  shippedDate: Date
  shipVia: Int
  freight: Float
  shipName: String
  shipAddress: String
  shipCity: String
  shipRegion: String
  shipPostalCode: String
  shipCountry: String
}

"""
Represents an update to a `Order`. Fields that are set will be updated.
"""
input OrderPatch {
  orderId: Int
  customerId: String
  employeeId: Int
  orderDate: Date
  requiredDate: Date
  shippedDate: Date
  shipVia: Int
  freight: Float
  shipName: String
  shipAddress: String
  shipCity: String
  shipRegion: String
  shipPostalCode: String
  shipCountry: String
}

"""A connection to a list of `Order` values."""
type OrdersConnection {
  """A list of `Order` objects."""
  nodes: [Order!]!

  """
  A list of edges which contains the `Order` and cursor to aid in pagination.
  """
  edges: [OrdersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Order` you could get from the connection."""
  totalCount: Int!
}

"""A `Order` edge in the connection."""
type OrdersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Order` at the end of the edge."""
  node: Order!
}

"""Methods to use when ordering `Order`."""
enum OrdersOrderBy {
  NATURAL
  ORDER_ID_ASC
  ORDER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `ChinookAlbum`."""
  allChinookAlbums(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookAlbum`."""
    orderBy: [ChinookAlbumsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookAlbumCondition
  ): ChinookAlbumsConnection

  """Reads and enables pagination through a set of `ChinookArtist`."""
  allChinookArtists(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookArtist`."""
    orderBy: [ChinookArtistsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookArtistCondition
  ): ChinookArtistsConnection

  """Reads and enables pagination through a set of `ChinookCustomer`."""
  allChinookCustomers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookCustomer`."""
    orderBy: [ChinookCustomersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookCustomerCondition
  ): ChinookCustomersConnection

  """Reads and enables pagination through a set of `ChinookEmployee`."""
  allChinookEmployees(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookEmployee`."""
    orderBy: [ChinookEmployeesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookEmployeeCondition
  ): ChinookEmployeesConnection

  """Reads and enables pagination through a set of `ChinookGenre`."""
  allChinookGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookGenre`."""
    orderBy: [ChinookGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookGenreCondition
  ): ChinookGenresConnection

  """Reads and enables pagination through a set of `ChinookInvoice`."""
  allChinookInvoices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookInvoice`."""
    orderBy: [ChinookInvoicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookInvoiceCondition
  ): ChinookInvoicesConnection

  """Reads and enables pagination through a set of `ChinookInvoiceline`."""
  allChinookInvoicelines(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookInvoiceline`."""
    orderBy: [ChinookInvoicelinesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookInvoicelineCondition
  ): ChinookInvoicelinesConnection

  """Reads and enables pagination through a set of `ChinookMediatype`."""
  allChinookMediatypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookMediatype`."""
    orderBy: [ChinookMediatypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookMediatypeCondition
  ): ChinookMediatypesConnection

  """Reads and enables pagination through a set of `ChinookPlaylist`."""
  allChinookPlaylists(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookPlaylist`."""
    orderBy: [ChinookPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookPlaylistCondition
  ): ChinookPlaylistsConnection

  """Reads and enables pagination through a set of `ChinookPlaylisttrack`."""
  allChinookPlaylisttracks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookPlaylisttrack`."""
    orderBy: [ChinookPlaylisttracksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookPlaylisttrackCondition
  ): ChinookPlaylisttracksConnection

  """Reads and enables pagination through a set of `ChinookTrack`."""
  allChinookTracks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChinookTrack`."""
    orderBy: [ChinookTracksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChinookTrackCondition
  ): ChinookTracksConnection

  """Reads and enables pagination through a set of `NorthwindCategory`."""
  allNorthwindCategories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindCategory`."""
    orderBy: [NorthwindCategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindCategoryCondition
  ): NorthwindCategoriesConnection

  """
  Reads and enables pagination through a set of `NorthwindCustomerCustomerDemo`.
  """
  allNorthwindCustomerCustomerDemos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindCustomerCustomerDemo`."""
    orderBy: [NorthwindCustomerCustomerDemosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindCustomerCustomerDemoCondition
  ): NorthwindCustomerCustomerDemosConnection

  """
  Reads and enables pagination through a set of `NorthwindCustomerDemographic`.
  """
  allNorthwindCustomerDemographics(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindCustomerDemographic`."""
    orderBy: [NorthwindCustomerDemographicsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindCustomerDemographicCondition
  ): NorthwindCustomerDemographicsConnection

  """Reads and enables pagination through a set of `NorthwindCustomer`."""
  allNorthwindCustomers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindCustomer`."""
    orderBy: [NorthwindCustomersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindCustomerCondition
  ): NorthwindCustomersConnection

  """
  Reads and enables pagination through a set of `NorthwindEmployeeTerritory`.
  """
  allNorthwindEmployeeTerritories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindEmployeeTerritory`."""
    orderBy: [NorthwindEmployeeTerritoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindEmployeeTerritoryCondition
  ): NorthwindEmployeeTerritoriesConnection

  """Reads and enables pagination through a set of `Employee`."""
  allEmployees(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Employee`."""
    orderBy: [EmployeesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmployeeCondition
  ): EmployeesConnection

  """Reads and enables pagination through a set of `NorthwindOrderDetail`."""
  allNorthwindOrderDetails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindOrderDetail`."""
    orderBy: [NorthwindOrderDetailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindOrderDetailCondition
  ): NorthwindOrderDetailsConnection

  """Reads and enables pagination through a set of `Order`."""
  allOrders(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrderCondition
  ): OrdersConnection

  """Reads and enables pagination through a set of `NorthwindProduct`."""
  allNorthwindProducts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindProduct`."""
    orderBy: [NorthwindProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindProductCondition
  ): NorthwindProductsConnection

  """Reads and enables pagination through a set of `NorthwindRegion`."""
  allNorthwindRegions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindRegion`."""
    orderBy: [NorthwindRegionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindRegionCondition
  ): NorthwindRegionsConnection

  """Reads and enables pagination through a set of `NorthwindShipper`."""
  allNorthwindShippers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindShipper`."""
    orderBy: [NorthwindShippersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindShipperCondition
  ): NorthwindShippersConnection

  """Reads and enables pagination through a set of `NorthwindSupplier`."""
  allNorthwindSuppliers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindSupplier`."""
    orderBy: [NorthwindSuppliersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindSupplierCondition
  ): NorthwindSuppliersConnection

  """Reads and enables pagination through a set of `NorthwindTerritory`."""
  allNorthwindTerritories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindTerritory`."""
    orderBy: [NorthwindTerritoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindTerritoryCondition
  ): NorthwindTerritoriesConnection

  """Reads and enables pagination through a set of `NorthwindUsState`."""
  allNorthwindUsStates(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NorthwindUsState`."""
    orderBy: [NorthwindUsStatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NorthwindUsStateCondition
  ): NorthwindUsStatesConnection

  """Reads and enables pagination through a set of `Booking`."""
  allBookings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BookingCondition
  ): BookingsConnection

  """Reads and enables pagination through a set of `Facility`."""
  allFacilities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition
  ): FacilitiesConnection

  """Reads and enables pagination through a set of `Member`."""
  allMembers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MemberCondition
  ): MembersConnection
  chinookAlbumByAlbumId(albumId: Int!): ChinookAlbum
  chinookArtistByArtistId(artistId: Int!): ChinookArtist
  chinookCustomerByCustomerId(customerId: Int!): ChinookCustomer
  chinookEmployeeByEmployeeId(employeeId: Int!): ChinookEmployee
  chinookGenreByGenreId(genreId: Int!): ChinookGenre
  chinookInvoiceByInvoiceId(invoiceId: Int!): ChinookInvoice
  chinookInvoicelineByInvoiceLineId(invoiceLineId: Int!): ChinookInvoiceline
  chinookMediatypeByMediaTypeId(mediaTypeId: Int!): ChinookMediatype
  chinookPlaylistByPlaylistId(playlistId: Int!): ChinookPlaylist
  chinookPlaylisttrackByPlaylistIdAndTrackId(playlistId: Int!, trackId: Int!): ChinookPlaylisttrack
  chinookTrackByTrackId(trackId: Int!): ChinookTrack
  northwindCategoryByCategoryId(categoryId: Int!): NorthwindCategory
  northwindCustomerCustomerDemoByCustomerIdAndCustomerTypeId(customerId: String!, customerTypeId: String!): NorthwindCustomerCustomerDemo
  northwindCustomerDemographicByCustomerTypeId(customerTypeId: String!): NorthwindCustomerDemographic
  northwindCustomerByCustomerId(customerId: String!): NorthwindCustomer
  northwindEmployeeTerritoryByEmployeeIdAndTerritoryId(employeeId: Int!, territoryId: String!): NorthwindEmployeeTerritory
  employeeByEmployeeId(employeeId: Int!): Employee
  northwindOrderDetailByOrderIdAndProductId(orderId: Int!, productId: Int!): NorthwindOrderDetail
  orderByOrderId(orderId: Int!): Order
  northwindProductByProductId(productId: Int!): NorthwindProduct
  northwindRegionByRegionId(regionId: Int!): NorthwindRegion
  northwindShipperByShipperId(shipperId: Int!): NorthwindShipper
  northwindSupplierBySupplierId(supplierId: Int!): NorthwindSupplier
  northwindTerritoryByTerritoryId(territoryId: String!): NorthwindTerritory
  northwindUsStateByStateId(stateId: Int!): NorthwindUsState
  bookingByBookid(bookid: Int!): Booking
  facilityByFacid(facid: Int!): Facility
  memberByMemid(memid: Int!): Member

  """Reads a single `ChinookAlbum` using its globally unique `ID`."""
  chinookAlbum(
    """
    The globally unique `ID` to be used in selecting a single `ChinookAlbum`.
    """
    nodeId: ID!
  ): ChinookAlbum

  """Reads a single `ChinookArtist` using its globally unique `ID`."""
  chinookArtist(
    """
    The globally unique `ID` to be used in selecting a single `ChinookArtist`.
    """
    nodeId: ID!
  ): ChinookArtist

  """Reads a single `ChinookCustomer` using its globally unique `ID`."""
  chinookCustomer(
    """
    The globally unique `ID` to be used in selecting a single `ChinookCustomer`.
    """
    nodeId: ID!
  ): ChinookCustomer

  """Reads a single `ChinookEmployee` using its globally unique `ID`."""
  chinookEmployee(
    """
    The globally unique `ID` to be used in selecting a single `ChinookEmployee`.
    """
    nodeId: ID!
  ): ChinookEmployee

  """Reads a single `ChinookGenre` using its globally unique `ID`."""
  chinookGenre(
    """
    The globally unique `ID` to be used in selecting a single `ChinookGenre`.
    """
    nodeId: ID!
  ): ChinookGenre

  """Reads a single `ChinookInvoice` using its globally unique `ID`."""
  chinookInvoice(
    """
    The globally unique `ID` to be used in selecting a single `ChinookInvoice`.
    """
    nodeId: ID!
  ): ChinookInvoice

  """Reads a single `ChinookInvoiceline` using its globally unique `ID`."""
  chinookInvoiceline(
    """
    The globally unique `ID` to be used in selecting a single `ChinookInvoiceline`.
    """
    nodeId: ID!
  ): ChinookInvoiceline

  """Reads a single `ChinookMediatype` using its globally unique `ID`."""
  chinookMediatype(
    """
    The globally unique `ID` to be used in selecting a single `ChinookMediatype`.
    """
    nodeId: ID!
  ): ChinookMediatype

  """Reads a single `ChinookPlaylist` using its globally unique `ID`."""
  chinookPlaylist(
    """
    The globally unique `ID` to be used in selecting a single `ChinookPlaylist`.
    """
    nodeId: ID!
  ): ChinookPlaylist

  """Reads a single `ChinookPlaylisttrack` using its globally unique `ID`."""
  chinookPlaylisttrack(
    """
    The globally unique `ID` to be used in selecting a single `ChinookPlaylisttrack`.
    """
    nodeId: ID!
  ): ChinookPlaylisttrack

  """Reads a single `ChinookTrack` using its globally unique `ID`."""
  chinookTrack(
    """
    The globally unique `ID` to be used in selecting a single `ChinookTrack`.
    """
    nodeId: ID!
  ): ChinookTrack

  """Reads a single `NorthwindCategory` using its globally unique `ID`."""
  northwindCategory(
    """
    The globally unique `ID` to be used in selecting a single `NorthwindCategory`.
    """
    nodeId: ID!
  ): NorthwindCategory

  """
  Reads a single `NorthwindCustomerCustomerDemo` using its globally unique `ID`.
  """
  northwindCustomerCustomerDemo(
    """
    The globally unique `ID` to be used in selecting a single `NorthwindCustomerCustomerDemo`.
    """
    nodeId: ID!
  ): NorthwindCustomerCustomerDemo

  """
  Reads a single `NorthwindCustomerDemographic` using its globally unique `ID`.
  """
  northwindCustomerDemographic(
    """
    The globally unique `ID` to be used in selecting a single `NorthwindCustomerDemographic`.
    """
    nodeId: ID!
  ): NorthwindCustomerDemographic

  """Reads a single `NorthwindCustomer` using its globally unique `ID`."""
  northwindCustomer(
    """
    The globally unique `ID` to be used in selecting a single `NorthwindCustomer`.
    """
    nodeId: ID!
  ): NorthwindCustomer

  """
  Reads a single `NorthwindEmployeeTerritory` using its globally unique `ID`.
  """
  northwindEmployeeTerritory(
    """
    The globally unique `ID` to be used in selecting a single `NorthwindEmployeeTerritory`.
    """
    nodeId: ID!
  ): NorthwindEmployeeTerritory

  """Reads a single `Employee` using its globally unique `ID`."""
  employee(
    """The globally unique `ID` to be used in selecting a single `Employee`."""
    nodeId: ID!
  ): Employee

  """Reads a single `NorthwindOrderDetail` using its globally unique `ID`."""
  northwindOrderDetail(
    """
    The globally unique `ID` to be used in selecting a single `NorthwindOrderDetail`.
    """
    nodeId: ID!
  ): NorthwindOrderDetail

  """Reads a single `Order` using its globally unique `ID`."""
  order(
    """The globally unique `ID` to be used in selecting a single `Order`."""
    nodeId: ID!
  ): Order

  """Reads a single `NorthwindProduct` using its globally unique `ID`."""
  northwindProduct(
    """
    The globally unique `ID` to be used in selecting a single `NorthwindProduct`.
    """
    nodeId: ID!
  ): NorthwindProduct

  """Reads a single `NorthwindRegion` using its globally unique `ID`."""
  northwindRegion(
    """
    The globally unique `ID` to be used in selecting a single `NorthwindRegion`.
    """
    nodeId: ID!
  ): NorthwindRegion

  """Reads a single `NorthwindShipper` using its globally unique `ID`."""
  northwindShipper(
    """
    The globally unique `ID` to be used in selecting a single `NorthwindShipper`.
    """
    nodeId: ID!
  ): NorthwindShipper

  """Reads a single `NorthwindSupplier` using its globally unique `ID`."""
  northwindSupplier(
    """
    The globally unique `ID` to be used in selecting a single `NorthwindSupplier`.
    """
    nodeId: ID!
  ): NorthwindSupplier

  """Reads a single `NorthwindTerritory` using its globally unique `ID`."""
  northwindTerritory(
    """
    The globally unique `ID` to be used in selecting a single `NorthwindTerritory`.
    """
    nodeId: ID!
  ): NorthwindTerritory

  """Reads a single `NorthwindUsState` using its globally unique `ID`."""
  northwindUsState(
    """
    The globally unique `ID` to be used in selecting a single `NorthwindUsState`.
    """
    nodeId: ID!
  ): NorthwindUsState

  """Reads a single `Booking` using its globally unique `ID`."""
  booking(
    """The globally unique `ID` to be used in selecting a single `Booking`."""
    nodeId: ID!
  ): Booking

  """Reads a single `Facility` using its globally unique `ID`."""
  facility(
    """The globally unique `ID` to be used in selecting a single `Facility`."""
    nodeId: ID!
  ): Facility

  """Reads a single `Member` using its globally unique `ID`."""
  member(
    """The globally unique `ID` to be used in selecting a single `Member`."""
    nodeId: ID!
  ): Member
}

"""All input for the `updateBookingByBookid` mutation."""
input UpdateBookingByBookidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Booking` being updated.
  """
  bookingPatch: BookingPatch!
  bookid: Int!
}

"""All input for the `updateBooking` mutation."""
input UpdateBookingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Booking` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Booking` being updated.
  """
  bookingPatch: BookingPatch!
}

"""The output of our update `Booking` mutation."""
type UpdateBookingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Booking` that was updated by this mutation."""
  booking: Booking

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Facility` that is related to this `Booking`."""
  facilityByFacid: Facility

  """Reads a single `Member` that is related to this `Booking`."""
  memberByMemid: Member

  """An edge for our `Booking`. May be used by Relay 1."""
  bookingEdge(
    """The method to use when ordering `Booking`."""
    orderBy: [BookingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BookingsEdge
}

"""All input for the `updateChinookAlbumByAlbumId` mutation."""
input UpdateChinookAlbumByAlbumIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChinookAlbum` being updated.
  """
  chinookAlbumPatch: ChinookAlbumPatch!
  albumId: Int!
}

"""All input for the `updateChinookAlbum` mutation."""
input UpdateChinookAlbumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookAlbum` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChinookAlbum` being updated.
  """
  chinookAlbumPatch: ChinookAlbumPatch!
}

"""The output of our update `ChinookAlbum` mutation."""
type UpdateChinookAlbumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookAlbum` that was updated by this mutation."""
  chinookAlbum: ChinookAlbum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChinookArtist` that is related to this `ChinookAlbum`."""
  chinookArtistByArtistId: ChinookArtist

  """An edge for our `ChinookAlbum`. May be used by Relay 1."""
  chinookAlbumEdge(
    """The method to use when ordering `ChinookAlbum`."""
    orderBy: [ChinookAlbumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookAlbumsEdge
}

"""All input for the `updateChinookArtistByArtistId` mutation."""
input UpdateChinookArtistByArtistIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChinookArtist` being updated.
  """
  chinookArtistPatch: ChinookArtistPatch!
  artistId: Int!
}

"""All input for the `updateChinookArtist` mutation."""
input UpdateChinookArtistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookArtist` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChinookArtist` being updated.
  """
  chinookArtistPatch: ChinookArtistPatch!
}

"""The output of our update `ChinookArtist` mutation."""
type UpdateChinookArtistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookArtist` that was updated by this mutation."""
  chinookArtist: ChinookArtist

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChinookArtist`. May be used by Relay 1."""
  chinookArtistEdge(
    """The method to use when ordering `ChinookArtist`."""
    orderBy: [ChinookArtistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookArtistsEdge
}

"""All input for the `updateChinookCustomerByCustomerId` mutation."""
input UpdateChinookCustomerByCustomerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChinookCustomer` being updated.
  """
  chinookCustomerPatch: ChinookCustomerPatch!
  customerId: Int!
}

"""All input for the `updateChinookCustomer` mutation."""
input UpdateChinookCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookCustomer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChinookCustomer` being updated.
  """
  chinookCustomerPatch: ChinookCustomerPatch!
}

"""The output of our update `ChinookCustomer` mutation."""
type UpdateChinookCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookCustomer` that was updated by this mutation."""
  chinookCustomer: ChinookCustomer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookEmployee` that is related to this `ChinookCustomer`.
  """
  chinookEmployeeBySupportRepId: ChinookEmployee

  """An edge for our `ChinookCustomer`. May be used by Relay 1."""
  chinookCustomerEdge(
    """The method to use when ordering `ChinookCustomer`."""
    orderBy: [ChinookCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookCustomersEdge
}

"""All input for the `updateChinookEmployeeByEmployeeId` mutation."""
input UpdateChinookEmployeeByEmployeeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChinookEmployee` being updated.
  """
  chinookEmployeePatch: ChinookEmployeePatch!
  employeeId: Int!
}

"""All input for the `updateChinookEmployee` mutation."""
input UpdateChinookEmployeeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookEmployee` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChinookEmployee` being updated.
  """
  chinookEmployeePatch: ChinookEmployeePatch!
}

"""The output of our update `ChinookEmployee` mutation."""
type UpdateChinookEmployeePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookEmployee` that was updated by this mutation."""
  chinookEmployee: ChinookEmployee

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookEmployee` that is related to this `ChinookEmployee`.
  """
  chinookEmployeeByReportsTo: ChinookEmployee

  """An edge for our `ChinookEmployee`. May be used by Relay 1."""
  chinookEmployeeEdge(
    """The method to use when ordering `ChinookEmployee`."""
    orderBy: [ChinookEmployeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookEmployeesEdge
}

"""All input for the `updateChinookGenreByGenreId` mutation."""
input UpdateChinookGenreByGenreIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChinookGenre` being updated.
  """
  chinookGenrePatch: ChinookGenrePatch!
  genreId: Int!
}

"""All input for the `updateChinookGenre` mutation."""
input UpdateChinookGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookGenre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChinookGenre` being updated.
  """
  chinookGenrePatch: ChinookGenrePatch!
}

"""The output of our update `ChinookGenre` mutation."""
type UpdateChinookGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookGenre` that was updated by this mutation."""
  chinookGenre: ChinookGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChinookGenre`. May be used by Relay 1."""
  chinookGenreEdge(
    """The method to use when ordering `ChinookGenre`."""
    orderBy: [ChinookGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookGenresEdge
}

"""All input for the `updateChinookInvoiceByInvoiceId` mutation."""
input UpdateChinookInvoiceByInvoiceIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChinookInvoice` being updated.
  """
  chinookInvoicePatch: ChinookInvoicePatch!
  invoiceId: Int!
}

"""All input for the `updateChinookInvoice` mutation."""
input UpdateChinookInvoiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookInvoice` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChinookInvoice` being updated.
  """
  chinookInvoicePatch: ChinookInvoicePatch!
}

"""All input for the `updateChinookInvoicelineByInvoiceLineId` mutation."""
input UpdateChinookInvoicelineByInvoiceLineIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChinookInvoiceline` being updated.
  """
  chinookInvoicelinePatch: ChinookInvoicelinePatch!
  invoiceLineId: Int!
}

"""All input for the `updateChinookInvoiceline` mutation."""
input UpdateChinookInvoicelineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookInvoiceline` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChinookInvoiceline` being updated.
  """
  chinookInvoicelinePatch: ChinookInvoicelinePatch!
}

"""The output of our update `ChinookInvoiceline` mutation."""
type UpdateChinookInvoicelinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookInvoiceline` that was updated by this mutation."""
  chinookInvoiceline: ChinookInvoiceline

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookInvoice` that is related to this `ChinookInvoiceline`.
  """
  chinookInvoiceByInvoiceId: ChinookInvoice

  """
  Reads a single `ChinookTrack` that is related to this `ChinookInvoiceline`.
  """
  chinookTrackByTrackId: ChinookTrack

  """An edge for our `ChinookInvoiceline`. May be used by Relay 1."""
  chinookInvoicelineEdge(
    """The method to use when ordering `ChinookInvoiceline`."""
    orderBy: [ChinookInvoicelinesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookInvoicelinesEdge
}

"""The output of our update `ChinookInvoice` mutation."""
type UpdateChinookInvoicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookInvoice` that was updated by this mutation."""
  chinookInvoice: ChinookInvoice

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookCustomer` that is related to this `ChinookInvoice`.
  """
  chinookCustomerByCustomerId: ChinookCustomer

  """An edge for our `ChinookInvoice`. May be used by Relay 1."""
  chinookInvoiceEdge(
    """The method to use when ordering `ChinookInvoice`."""
    orderBy: [ChinookInvoicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookInvoicesEdge
}

"""All input for the `updateChinookMediatypeByMediaTypeId` mutation."""
input UpdateChinookMediatypeByMediaTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChinookMediatype` being updated.
  """
  chinookMediatypePatch: ChinookMediatypePatch!
  mediaTypeId: Int!
}

"""All input for the `updateChinookMediatype` mutation."""
input UpdateChinookMediatypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookMediatype` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChinookMediatype` being updated.
  """
  chinookMediatypePatch: ChinookMediatypePatch!
}

"""The output of our update `ChinookMediatype` mutation."""
type UpdateChinookMediatypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookMediatype` that was updated by this mutation."""
  chinookMediatype: ChinookMediatype

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChinookMediatype`. May be used by Relay 1."""
  chinookMediatypeEdge(
    """The method to use when ordering `ChinookMediatype`."""
    orderBy: [ChinookMediatypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookMediatypesEdge
}

"""All input for the `updateChinookPlaylistByPlaylistId` mutation."""
input UpdateChinookPlaylistByPlaylistIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChinookPlaylist` being updated.
  """
  chinookPlaylistPatch: ChinookPlaylistPatch!
  playlistId: Int!
}

"""All input for the `updateChinookPlaylist` mutation."""
input UpdateChinookPlaylistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookPlaylist` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChinookPlaylist` being updated.
  """
  chinookPlaylistPatch: ChinookPlaylistPatch!
}

"""The output of our update `ChinookPlaylist` mutation."""
type UpdateChinookPlaylistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookPlaylist` that was updated by this mutation."""
  chinookPlaylist: ChinookPlaylist

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ChinookPlaylist`. May be used by Relay 1."""
  chinookPlaylistEdge(
    """The method to use when ordering `ChinookPlaylist`."""
    orderBy: [ChinookPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookPlaylistsEdge
}

"""
All input for the `updateChinookPlaylisttrackByPlaylistIdAndTrackId` mutation.
"""
input UpdateChinookPlaylisttrackByPlaylistIdAndTrackIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChinookPlaylisttrack` being updated.
  """
  chinookPlaylisttrackPatch: ChinookPlaylisttrackPatch!
  playlistId: Int!
  trackId: Int!
}

"""All input for the `updateChinookPlaylisttrack` mutation."""
input UpdateChinookPlaylisttrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookPlaylisttrack` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChinookPlaylisttrack` being updated.
  """
  chinookPlaylisttrackPatch: ChinookPlaylisttrackPatch!
}

"""The output of our update `ChinookPlaylisttrack` mutation."""
type UpdateChinookPlaylisttrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookPlaylisttrack` that was updated by this mutation."""
  chinookPlaylisttrack: ChinookPlaylisttrack

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ChinookPlaylist` that is related to this `ChinookPlaylisttrack`.
  """
  chinookPlaylistByPlaylistId: ChinookPlaylist

  """
  Reads a single `ChinookTrack` that is related to this `ChinookPlaylisttrack`.
  """
  chinookTrackByTrackId: ChinookTrack

  """An edge for our `ChinookPlaylisttrack`. May be used by Relay 1."""
  chinookPlaylisttrackEdge(
    """The method to use when ordering `ChinookPlaylisttrack`."""
    orderBy: [ChinookPlaylisttracksOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookPlaylisttracksEdge
}

"""All input for the `updateChinookTrackByTrackId` mutation."""
input UpdateChinookTrackByTrackIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChinookTrack` being updated.
  """
  chinookTrackPatch: ChinookTrackPatch!
  trackId: Int!
}

"""All input for the `updateChinookTrack` mutation."""
input UpdateChinookTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChinookTrack` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChinookTrack` being updated.
  """
  chinookTrackPatch: ChinookTrackPatch!
}

"""The output of our update `ChinookTrack` mutation."""
type UpdateChinookTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChinookTrack` that was updated by this mutation."""
  chinookTrack: ChinookTrack

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ChinookAlbum` that is related to this `ChinookTrack`."""
  chinookAlbumByAlbumId: ChinookAlbum

  """
  Reads a single `ChinookMediatype` that is related to this `ChinookTrack`.
  """
  chinookMediatypeByMediaTypeId: ChinookMediatype

  """Reads a single `ChinookGenre` that is related to this `ChinookTrack`."""
  chinookGenreByGenreId: ChinookGenre

  """An edge for our `ChinookTrack`. May be used by Relay 1."""
  chinookTrackEdge(
    """The method to use when ordering `ChinookTrack`."""
    orderBy: [ChinookTracksOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChinookTracksEdge
}

"""All input for the `updateEmployeeByEmployeeId` mutation."""
input UpdateEmployeeByEmployeeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Employee` being updated.
  """
  employeePatch: EmployeePatch!
  employeeId: Int!
}

"""All input for the `updateEmployee` mutation."""
input UpdateEmployeeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Employee` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Employee` being updated.
  """
  employeePatch: EmployeePatch!
}

"""The output of our update `Employee` mutation."""
type UpdateEmployeePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Employee` that was updated by this mutation."""
  employee: Employee

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Employee`. May be used by Relay 1."""
  employeeEdge(
    """The method to use when ordering `Employee`."""
    orderBy: [EmployeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmployeesEdge
}

"""All input for the `updateFacilityByFacid` mutation."""
input UpdateFacilityByFacidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  facilityPatch: FacilityPatch!
  facid: Int!
}

"""All input for the `updateFacility` mutation."""
input UpdateFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Facility` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  facilityPatch: FacilityPatch!
}

"""The output of our update `Facility` mutation."""
type UpdateFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was updated by this mutation."""
  facility: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge
}

"""All input for the `updateMemberByMemid` mutation."""
input UpdateMemberByMemidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Member` being updated.
  """
  memberPatch: MemberPatch!
  memid: Int!
}

"""All input for the `updateMember` mutation."""
input UpdateMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Member` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Member` being updated.
  """
  memberPatch: MemberPatch!
}

"""The output of our update `Member` mutation."""
type UpdateMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was updated by this mutation."""
  member: Member

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Member` that is related to this `Member`."""
  memberByRecommendedby: Member

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge
}

"""All input for the `updateNorthwindCategoryByCategoryId` mutation."""
input UpdateNorthwindCategoryByCategoryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NorthwindCategory` being updated.
  """
  northwindCategoryPatch: NorthwindCategoryPatch!
  categoryId: Int!
}

"""All input for the `updateNorthwindCategory` mutation."""
input UpdateNorthwindCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindCategory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NorthwindCategory` being updated.
  """
  northwindCategoryPatch: NorthwindCategoryPatch!
}

"""The output of our update `NorthwindCategory` mutation."""
type UpdateNorthwindCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindCategory` that was updated by this mutation."""
  northwindCategory: NorthwindCategory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindCategory`. May be used by Relay 1."""
  northwindCategoryEdge(
    """The method to use when ordering `NorthwindCategory`."""
    orderBy: [NorthwindCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindCategoriesEdge
}

"""All input for the `updateNorthwindCustomerByCustomerId` mutation."""
input UpdateNorthwindCustomerByCustomerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NorthwindCustomer` being updated.
  """
  northwindCustomerPatch: NorthwindCustomerPatch!
  customerId: String!
}

"""
All input for the `updateNorthwindCustomerCustomerDemoByCustomerIdAndCustomerTypeId` mutation.
"""
input UpdateNorthwindCustomerCustomerDemoByCustomerIdAndCustomerTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NorthwindCustomerCustomerDemo` being updated.
  """
  northwindCustomerCustomerDemoPatch: NorthwindCustomerCustomerDemoPatch!
  customerId: String!
  customerTypeId: String!
}

"""All input for the `updateNorthwindCustomerCustomerDemo` mutation."""
input UpdateNorthwindCustomerCustomerDemoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindCustomerCustomerDemo` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NorthwindCustomerCustomerDemo` being updated.
  """
  northwindCustomerCustomerDemoPatch: NorthwindCustomerCustomerDemoPatch!
}

"""The output of our update `NorthwindCustomerCustomerDemo` mutation."""
type UpdateNorthwindCustomerCustomerDemoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindCustomerCustomerDemo` that was updated by this mutation."""
  northwindCustomerCustomerDemo: NorthwindCustomerCustomerDemo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `NorthwindCustomer` that is related to this `NorthwindCustomerCustomerDemo`.
  """
  northwindCustomerByCustomerId: NorthwindCustomer

  """
  An edge for our `NorthwindCustomerCustomerDemo`. May be used by Relay 1.
  """
  northwindCustomerCustomerDemoEdge(
    """The method to use when ordering `NorthwindCustomerCustomerDemo`."""
    orderBy: [NorthwindCustomerCustomerDemosOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindCustomerCustomerDemosEdge
}

"""
All input for the `updateNorthwindCustomerDemographicByCustomerTypeId` mutation.
"""
input UpdateNorthwindCustomerDemographicByCustomerTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NorthwindCustomerDemographic` being updated.
  """
  northwindCustomerDemographicPatch: NorthwindCustomerDemographicPatch!
  customerTypeId: String!
}

"""All input for the `updateNorthwindCustomerDemographic` mutation."""
input UpdateNorthwindCustomerDemographicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindCustomerDemographic` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NorthwindCustomerDemographic` being updated.
  """
  northwindCustomerDemographicPatch: NorthwindCustomerDemographicPatch!
}

"""The output of our update `NorthwindCustomerDemographic` mutation."""
type UpdateNorthwindCustomerDemographicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindCustomerDemographic` that was updated by this mutation."""
  northwindCustomerDemographic: NorthwindCustomerDemographic

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `NorthwindCustomerDemographic`. May be used by Relay 1.
  """
  northwindCustomerDemographicEdge(
    """The method to use when ordering `NorthwindCustomerDemographic`."""
    orderBy: [NorthwindCustomerDemographicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindCustomerDemographicsEdge
}

"""All input for the `updateNorthwindCustomer` mutation."""
input UpdateNorthwindCustomerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindCustomer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NorthwindCustomer` being updated.
  """
  northwindCustomerPatch: NorthwindCustomerPatch!
}

"""The output of our update `NorthwindCustomer` mutation."""
type UpdateNorthwindCustomerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindCustomer` that was updated by this mutation."""
  northwindCustomer: NorthwindCustomer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindCustomer`. May be used by Relay 1."""
  northwindCustomerEdge(
    """The method to use when ordering `NorthwindCustomer`."""
    orderBy: [NorthwindCustomersOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindCustomersEdge
}

"""
All input for the `updateNorthwindEmployeeTerritoryByEmployeeIdAndTerritoryId` mutation.
"""
input UpdateNorthwindEmployeeTerritoryByEmployeeIdAndTerritoryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NorthwindEmployeeTerritory` being updated.
  """
  northwindEmployeeTerritoryPatch: NorthwindEmployeeTerritoryPatch!
  employeeId: Int!
  territoryId: String!
}

"""All input for the `updateNorthwindEmployeeTerritory` mutation."""
input UpdateNorthwindEmployeeTerritoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindEmployeeTerritory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NorthwindEmployeeTerritory` being updated.
  """
  northwindEmployeeTerritoryPatch: NorthwindEmployeeTerritoryPatch!
}

"""The output of our update `NorthwindEmployeeTerritory` mutation."""
type UpdateNorthwindEmployeeTerritoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindEmployeeTerritory` that was updated by this mutation."""
  northwindEmployeeTerritory: NorthwindEmployeeTerritory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Employee` that is related to this `NorthwindEmployeeTerritory`.
  """
  employeeByEmployeeId: Employee

  """An edge for our `NorthwindEmployeeTerritory`. May be used by Relay 1."""
  northwindEmployeeTerritoryEdge(
    """The method to use when ordering `NorthwindEmployeeTerritory`."""
    orderBy: [NorthwindEmployeeTerritoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindEmployeeTerritoriesEdge
}

"""
All input for the `updateNorthwindOrderDetailByOrderIdAndProductId` mutation.
"""
input UpdateNorthwindOrderDetailByOrderIdAndProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NorthwindOrderDetail` being updated.
  """
  northwindOrderDetailPatch: NorthwindOrderDetailPatch!
  orderId: Int!
  productId: Int!
}

"""All input for the `updateNorthwindOrderDetail` mutation."""
input UpdateNorthwindOrderDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindOrderDetail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NorthwindOrderDetail` being updated.
  """
  northwindOrderDetailPatch: NorthwindOrderDetailPatch!
}

"""The output of our update `NorthwindOrderDetail` mutation."""
type UpdateNorthwindOrderDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindOrderDetail` that was updated by this mutation."""
  northwindOrderDetail: NorthwindOrderDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Order` that is related to this `NorthwindOrderDetail`."""
  orderByOrderId: Order

  """An edge for our `NorthwindOrderDetail`. May be used by Relay 1."""
  northwindOrderDetailEdge(
    """The method to use when ordering `NorthwindOrderDetail`."""
    orderBy: [NorthwindOrderDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindOrderDetailsEdge
}

"""All input for the `updateNorthwindProductByProductId` mutation."""
input UpdateNorthwindProductByProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NorthwindProduct` being updated.
  """
  northwindProductPatch: NorthwindProductPatch!
  productId: Int!
}

"""All input for the `updateNorthwindProduct` mutation."""
input UpdateNorthwindProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindProduct` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NorthwindProduct` being updated.
  """
  northwindProductPatch: NorthwindProductPatch!
}

"""The output of our update `NorthwindProduct` mutation."""
type UpdateNorthwindProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindProduct` that was updated by this mutation."""
  northwindProduct: NorthwindProduct

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindProduct`. May be used by Relay 1."""
  northwindProductEdge(
    """The method to use when ordering `NorthwindProduct`."""
    orderBy: [NorthwindProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindProductsEdge
}

"""All input for the `updateNorthwindRegionByRegionId` mutation."""
input UpdateNorthwindRegionByRegionIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NorthwindRegion` being updated.
  """
  northwindRegionPatch: NorthwindRegionPatch!
  regionId: Int!
}

"""All input for the `updateNorthwindRegion` mutation."""
input UpdateNorthwindRegionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindRegion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NorthwindRegion` being updated.
  """
  northwindRegionPatch: NorthwindRegionPatch!
}

"""The output of our update `NorthwindRegion` mutation."""
type UpdateNorthwindRegionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindRegion` that was updated by this mutation."""
  northwindRegion: NorthwindRegion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindRegion`. May be used by Relay 1."""
  northwindRegionEdge(
    """The method to use when ordering `NorthwindRegion`."""
    orderBy: [NorthwindRegionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindRegionsEdge
}

"""All input for the `updateNorthwindShipperByShipperId` mutation."""
input UpdateNorthwindShipperByShipperIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NorthwindShipper` being updated.
  """
  northwindShipperPatch: NorthwindShipperPatch!
  shipperId: Int!
}

"""All input for the `updateNorthwindShipper` mutation."""
input UpdateNorthwindShipperInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindShipper` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NorthwindShipper` being updated.
  """
  northwindShipperPatch: NorthwindShipperPatch!
}

"""The output of our update `NorthwindShipper` mutation."""
type UpdateNorthwindShipperPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindShipper` that was updated by this mutation."""
  northwindShipper: NorthwindShipper

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindShipper`. May be used by Relay 1."""
  northwindShipperEdge(
    """The method to use when ordering `NorthwindShipper`."""
    orderBy: [NorthwindShippersOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindShippersEdge
}

"""All input for the `updateNorthwindSupplierBySupplierId` mutation."""
input UpdateNorthwindSupplierBySupplierIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NorthwindSupplier` being updated.
  """
  northwindSupplierPatch: NorthwindSupplierPatch!
  supplierId: Int!
}

"""All input for the `updateNorthwindSupplier` mutation."""
input UpdateNorthwindSupplierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindSupplier` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NorthwindSupplier` being updated.
  """
  northwindSupplierPatch: NorthwindSupplierPatch!
}

"""The output of our update `NorthwindSupplier` mutation."""
type UpdateNorthwindSupplierPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindSupplier` that was updated by this mutation."""
  northwindSupplier: NorthwindSupplier

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindSupplier`. May be used by Relay 1."""
  northwindSupplierEdge(
    """The method to use when ordering `NorthwindSupplier`."""
    orderBy: [NorthwindSuppliersOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindSuppliersEdge
}

"""All input for the `updateNorthwindTerritoryByTerritoryId` mutation."""
input UpdateNorthwindTerritoryByTerritoryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NorthwindTerritory` being updated.
  """
  northwindTerritoryPatch: NorthwindTerritoryPatch!
  territoryId: String!
}

"""All input for the `updateNorthwindTerritory` mutation."""
input UpdateNorthwindTerritoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindTerritory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NorthwindTerritory` being updated.
  """
  northwindTerritoryPatch: NorthwindTerritoryPatch!
}

"""The output of our update `NorthwindTerritory` mutation."""
type UpdateNorthwindTerritoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindTerritory` that was updated by this mutation."""
  northwindTerritory: NorthwindTerritory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindTerritory`. May be used by Relay 1."""
  northwindTerritoryEdge(
    """The method to use when ordering `NorthwindTerritory`."""
    orderBy: [NorthwindTerritoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindTerritoriesEdge
}

"""All input for the `updateNorthwindUsStateByStateId` mutation."""
input UpdateNorthwindUsStateByStateIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NorthwindUsState` being updated.
  """
  northwindUsStatePatch: NorthwindUsStatePatch!
  stateId: Int!
}

"""All input for the `updateNorthwindUsState` mutation."""
input UpdateNorthwindUsStateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NorthwindUsState` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NorthwindUsState` being updated.
  """
  northwindUsStatePatch: NorthwindUsStatePatch!
}

"""The output of our update `NorthwindUsState` mutation."""
type UpdateNorthwindUsStatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NorthwindUsState` that was updated by this mutation."""
  northwindUsState: NorthwindUsState

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NorthwindUsState`. May be used by Relay 1."""
  northwindUsStateEdge(
    """The method to use when ordering `NorthwindUsState`."""
    orderBy: [NorthwindUsStatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NorthwindUsStatesEdge
}

"""All input for the `updateOrderByOrderId` mutation."""
input UpdateOrderByOrderIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Order` being updated.
  """
  orderPatch: OrderPatch!
  orderId: Int!
}

"""All input for the `updateOrder` mutation."""
input UpdateOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Order` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Order` being updated.
  """
  orderPatch: OrderPatch!
}

"""The output of our update `Order` mutation."""
type UpdateOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Order` that was updated by this mutation."""
  order: Order

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Order`. May be used by Relay 1."""
  orderEdge(
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrdersEdge
}
